/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/enum_cc.py:167
 */

#include "base/compiler.hh"
#include "enums/EventTypeId.hh"

namespace gem5
{

namespace enums
{
    const char *EventTypeIdStrings[Num_EventTypeId] =
    {
        "BR_IMMED_RETIRED",
        "BR_MIS_PRED",
        "BR_MIS_PRED_RETIRED",
        "BR_PRED",
        "BR_RETIRED",
        "BR_RETURN_RETIRED",
        "BUS_ACCESS",
        "BUS_CYCLES",
        "CHAIN",
        "CID_WRITE_RETIRED",
        "CPU_CYCLES",
        "EXC_RETURN",
        "EXC_TAKEN",
        "INST_RETIRED",
        "INST_SPEC",
        "INVALID",
        "L1D_CACHE",
        "L1D_CACHE_ALLOCATE",
        "L1D_CACHE_REFILL",
        "L1D_CACHE_WB",
        "L1D_TLB",
        "L1D_TLB_REFILL",
        "L1I_CACHE",
        "L1I_CACHE_REFILL",
        "L1I_TLB",
        "L1I_TLB_REFILL",
        "L2D_CACHE",
        "L2D_CACHE_ALLOCATE",
        "L2D_CACHE_REFILL",
        "L2D_CACHE_WB",
        "L2D_TLB",
        "L2D_TLB_REFILL",
        "L2I_CACHE",
        "L2I_CACHE_REFILL",
        "L2I_TLB",
        "L2I_TLB_REFILL",
        "L3D_CACHE",
        "L3D_CACHE_ALLOCATE",
        "L3D_CACHE_REFILL",
        "L3D_CACHE_WB",
        "LD_RETIRED",
        "MEMORY_ERROR",
        "MEM_ACCESS",
        "PC_WRITE_RETIRED",
        "STALL_BACKEND",
        "STALL_FRONTEND",
        "ST_RETIRED",
        "SW_INCR",
        "TTBR_WRITE_RETIRED",
        "UNALIGEND_LDST_RETIRED",
    };
} // namespace enums
} // namespace gem5
#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <sim/init.hh>

namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
    py::module_ m = m_internal.def_submodule("enum_EventTypeId");

py::enum_<enums::EventTypeId>(m, "enum_EventTypeId")
        .value("BR_IMMED_RETIRED", enums::BR_IMMED_RETIRED)
        .value("BR_MIS_PRED", enums::BR_MIS_PRED)
        .value("BR_MIS_PRED_RETIRED", enums::BR_MIS_PRED_RETIRED)
        .value("BR_PRED", enums::BR_PRED)
        .value("BR_RETIRED", enums::BR_RETIRED)
        .value("BR_RETURN_RETIRED", enums::BR_RETURN_RETIRED)
        .value("BUS_ACCESS", enums::BUS_ACCESS)
        .value("BUS_CYCLES", enums::BUS_CYCLES)
        .value("CHAIN", enums::CHAIN)
        .value("CID_WRITE_RETIRED", enums::CID_WRITE_RETIRED)
        .value("CPU_CYCLES", enums::CPU_CYCLES)
        .value("EXC_RETURN", enums::EXC_RETURN)
        .value("EXC_TAKEN", enums::EXC_TAKEN)
        .value("INST_RETIRED", enums::INST_RETIRED)
        .value("INST_SPEC", enums::INST_SPEC)
        .value("INVALID", enums::INVALID)
        .value("L1D_CACHE", enums::L1D_CACHE)
        .value("L1D_CACHE_ALLOCATE", enums::L1D_CACHE_ALLOCATE)
        .value("L1D_CACHE_REFILL", enums::L1D_CACHE_REFILL)
        .value("L1D_CACHE_WB", enums::L1D_CACHE_WB)
        .value("L1D_TLB", enums::L1D_TLB)
        .value("L1D_TLB_REFILL", enums::L1D_TLB_REFILL)
        .value("L1I_CACHE", enums::L1I_CACHE)
        .value("L1I_CACHE_REFILL", enums::L1I_CACHE_REFILL)
        .value("L1I_TLB", enums::L1I_TLB)
        .value("L1I_TLB_REFILL", enums::L1I_TLB_REFILL)
        .value("L2D_CACHE", enums::L2D_CACHE)
        .value("L2D_CACHE_ALLOCATE", enums::L2D_CACHE_ALLOCATE)
        .value("L2D_CACHE_REFILL", enums::L2D_CACHE_REFILL)
        .value("L2D_CACHE_WB", enums::L2D_CACHE_WB)
        .value("L2D_TLB", enums::L2D_TLB)
        .value("L2D_TLB_REFILL", enums::L2D_TLB_REFILL)
        .value("L2I_CACHE", enums::L2I_CACHE)
        .value("L2I_CACHE_REFILL", enums::L2I_CACHE_REFILL)
        .value("L2I_TLB", enums::L2I_TLB)
        .value("L2I_TLB_REFILL", enums::L2I_TLB_REFILL)
        .value("L3D_CACHE", enums::L3D_CACHE)
        .value("L3D_CACHE_ALLOCATE", enums::L3D_CACHE_ALLOCATE)
        .value("L3D_CACHE_REFILL", enums::L3D_CACHE_REFILL)
        .value("L3D_CACHE_WB", enums::L3D_CACHE_WB)
        .value("LD_RETIRED", enums::LD_RETIRED)
        .value("MEMORY_ERROR", enums::MEMORY_ERROR)
        .value("MEM_ACCESS", enums::MEM_ACCESS)
        .value("PC_WRITE_RETIRED", enums::PC_WRITE_RETIRED)
        .value("STALL_BACKEND", enums::STALL_BACKEND)
        .value("STALL_FRONTEND", enums::STALL_FRONTEND)
        .value("ST_RETIRED", enums::ST_RETIRED)
        .value("SW_INCR", enums::SW_INCR)
        .value("TTBR_WRITE_RETIRED", enums::TTBR_WRITE_RETIRED)
        .value("UNALIGEND_LDST_RETIRED", enums::UNALIGEND_LDST_RETIRED)
        .value("Num_EventTypeId", enums::Num_EventTypeId)
        .export_values()
        ;
    }
static EmbeddedPyBind embed_enum("enum_EventTypeId", module_init);

} // namespace gem5
    

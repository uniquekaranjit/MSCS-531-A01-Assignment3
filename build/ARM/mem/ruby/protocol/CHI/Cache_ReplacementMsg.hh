/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   src/mem/slicc/symbols/Type.py:587
 */

#ifndef __CHI_Cache_ReplacementMsg_HH__
#define __CHI_Cache_ReplacementMsg_HH__

#include <iostream>

#include "mem/ruby/slicc_interface/RubySlicc_Util.hh"

#include "mem/ruby/protocol/Message.hh"
namespace gem5
{

namespace ruby
{

class RubySystem;

namespace CHI
{

class Cache_ReplacementMsg :  public Message
{
  public:
Cache_ReplacementMsg(Tick curTime, int blockSize, RubySystem* rs) : Message(curTime, blockSize, rs)
{
        setRubySystem(rs);
        block_size_bits = floorLog2(blockSize);
        // m_addr has no default
        // m_from_addr has no default
        m_slot = 0;
         // default value of int
    }
    Cache_ReplacementMsg(const Cache_ReplacementMsg&) = default;
    Cache_ReplacementMsg
    &operator=(const Cache_ReplacementMsg&) = default;
    Cache_ReplacementMsg(const Tick curTime, const int blockSize, const RubySystem *rs, const Addr& local_addr, const Addr& local_from_addr, const int& local_slot)
        : Message(curTime, blockSize, rs)
    {
        m_addr = local_addr;
        m_from_addr = local_from_addr;
        m_slot = local_slot;
    }
    MsgPtr
    clone() const
    {
         return std::shared_ptr<Message>(new Cache_ReplacementMsg(*this));
    }
    void initBlockSize(int block_size)
    {
    	block_size_bits = floorLog2(block_size);
    }
    void setRubySystem(RubySystem *ruby_system)
    {
    }
    // Const accessors methods for each field
    /** \brief Const accessor method for addr field.
     *  \return addr field
     */
    const Addr&
    getaddr() const
    {
        return m_addr;
    }
    /** \brief Const accessor method for from_addr field.
     *  \return from_addr field
     */
    const Addr&
    getfrom_addr() const
    {
        return m_from_addr;
    }
    /** \brief Const accessor method for slot field.
     *  \return slot field
     */
    const int&
    getslot() const
    {
        return m_slot;
    }
    // Non const Accessors methods for each field
    /** \brief Non-const accessor method for addr field.
     *  \return addr field
     */
    Addr&
    getaddr()
    {
        return m_addr;
    }
    /** \brief Non-const accessor method for from_addr field.
     *  \return from_addr field
     */
    Addr&
    getfrom_addr()
    {
        return m_from_addr;
    }
    /** \brief Non-const accessor method for slot field.
     *  \return slot field
     */
    int&
    getslot()
    {
        return m_slot;
    }
    // Mutator methods for each field
    /** \brief Mutator method for addr field */
    void
    setaddr(const Addr& local_addr)
    {
        m_addr = local_addr;
    }
    /** \brief Mutator method for from_addr field */
    void
    setfrom_addr(const Addr& local_from_addr)
    {
        m_from_addr = local_from_addr;
    }
    /** \brief Mutator method for slot field */
    void
    setslot(const int& local_slot)
    {
        m_slot = local_slot;
    }
    void print(std::ostream& out) const;
  //private:
    int block_size_bits = 0;
    Addr m_addr;
    Addr m_from_addr;
    int m_slot;
    bool functionalRead(Packet* param_pkt);
    bool functionalRead(Packet* param_pkt, WriteMask& param_mask);
    bool functionalWrite(Packet* param_pkt);
};
inline ::std::ostream&
operator<<(::std::ostream& out, const Cache_ReplacementMsg& obj)
{
    obj.print(out);
    out << ::std::flush;
    return out;
}

} // namespace CHI
} // namespace ruby
} // namespace gem5

#endif // __CHI_Cache_ReplacementMsg_HH__

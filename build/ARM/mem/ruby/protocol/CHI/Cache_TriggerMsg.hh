/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   src/mem/slicc/symbols/Type.py:587
 */

#ifndef __CHI_Cache_TriggerMsg_HH__
#define __CHI_Cache_TriggerMsg_HH__

#include <iostream>

#include "mem/ruby/slicc_interface/RubySlicc_Util.hh"

#include "mem/ruby/protocol/Message.hh"
namespace gem5
{

namespace ruby
{

class RubySystem;

namespace CHI
{

class Cache_TriggerMsg :  public Message
{
  public:
Cache_TriggerMsg(Tick curTime, int blockSize, RubySystem* rs) : Message(curTime, blockSize, rs)
{
        setRubySystem(rs);
        block_size_bits = floorLog2(blockSize);
        // m_addr has no default
        m_usesTxnId = false;
         // default value of bool
        m_from_hazard = false;
         // default value of bool
    }
    Cache_TriggerMsg(const Cache_TriggerMsg&) = default;
    Cache_TriggerMsg
    &operator=(const Cache_TriggerMsg&) = default;
    Cache_TriggerMsg(const Tick curTime, const int blockSize, const RubySystem *rs, const Addr& local_addr, const bool& local_usesTxnId, const bool& local_from_hazard)
        : Message(curTime, blockSize, rs)
    {
        m_addr = local_addr;
        m_usesTxnId = local_usesTxnId;
        m_from_hazard = local_from_hazard;
    }
    MsgPtr
    clone() const
    {
         return std::shared_ptr<Message>(new Cache_TriggerMsg(*this));
    }
    void initBlockSize(int block_size)
    {
    	block_size_bits = floorLog2(block_size);
    }
    void setRubySystem(RubySystem *ruby_system)
    {
    }
    // Const accessors methods for each field
    /** \brief Const accessor method for addr field.
     *  \return addr field
     */
    const Addr&
    getaddr() const
    {
        return m_addr;
    }
    /** \brief Const accessor method for usesTxnId field.
     *  \return usesTxnId field
     */
    const bool&
    getusesTxnId() const
    {
        return m_usesTxnId;
    }
    /** \brief Const accessor method for from_hazard field.
     *  \return from_hazard field
     */
    const bool&
    getfrom_hazard() const
    {
        return m_from_hazard;
    }
    // Non const Accessors methods for each field
    /** \brief Non-const accessor method for addr field.
     *  \return addr field
     */
    Addr&
    getaddr()
    {
        return m_addr;
    }
    /** \brief Non-const accessor method for usesTxnId field.
     *  \return usesTxnId field
     */
    bool&
    getusesTxnId()
    {
        return m_usesTxnId;
    }
    /** \brief Non-const accessor method for from_hazard field.
     *  \return from_hazard field
     */
    bool&
    getfrom_hazard()
    {
        return m_from_hazard;
    }
    // Mutator methods for each field
    /** \brief Mutator method for addr field */
    void
    setaddr(const Addr& local_addr)
    {
        m_addr = local_addr;
    }
    /** \brief Mutator method for usesTxnId field */
    void
    setusesTxnId(const bool& local_usesTxnId)
    {
        m_usesTxnId = local_usesTxnId;
    }
    /** \brief Mutator method for from_hazard field */
    void
    setfrom_hazard(const bool& local_from_hazard)
    {
        m_from_hazard = local_from_hazard;
    }
    void print(std::ostream& out) const;
  //private:
    int block_size_bits = 0;
    Addr m_addr;
    bool m_usesTxnId;
    bool m_from_hazard;
    bool functionalRead(Packet* param_pkt);
    bool functionalRead(Packet* param_pkt, WriteMask& param_mask);
    bool functionalWrite(Packet* param_pkt);
};
inline ::std::ostream&
operator<<(::std::ostream& out, const Cache_TriggerMsg& obj)
{
    obj.print(out);
    out << ::std::flush;
    return out;
}

} // namespace CHI
} // namespace ruby
} // namespace gem5

#endif // __CHI_Cache_TriggerMsg_HH__

/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   src/mem/slicc/symbols/Type.py:587
 */

#ifndef __CHI_MiscNode_RetryTriggerMsg_HH__
#define __CHI_MiscNode_RetryTriggerMsg_HH__

#include <iostream>

#include "mem/ruby/slicc_interface/RubySlicc_Util.hh"

#include "mem/ruby/protocol/CHI/MiscNode_Event.hh"
#include "mem/ruby/protocol/MachineID.hh"
#include "mem/ruby/protocol/Message.hh"
namespace gem5
{

namespace ruby
{

class RubySystem;

namespace CHI
{

class MiscNode_RetryTriggerMsg :  public Message
{
  public:
MiscNode_RetryTriggerMsg(Tick curTime, int blockSize, RubySystem* rs) : Message(curTime, blockSize, rs)
{
        setRubySystem(rs);
        block_size_bits = floorLog2(blockSize);
        // m_txnId has no default
        m_event = MiscNode_Event_NUM;
         // default value of MiscNode_Event
        // m_retryDest has no default
    }
    MiscNode_RetryTriggerMsg(const MiscNode_RetryTriggerMsg&) = default;
    MiscNode_RetryTriggerMsg
    &operator=(const MiscNode_RetryTriggerMsg&) = default;
    MiscNode_RetryTriggerMsg(const Tick curTime, const int blockSize, const RubySystem *rs, const Addr& local_txnId, const MiscNode_Event& local_event, const MachineID& local_retryDest)
        : Message(curTime, blockSize, rs)
    {
        m_txnId = local_txnId;
        m_event = local_event;
        m_retryDest = local_retryDest;
    }
    MsgPtr
    clone() const
    {
         return std::shared_ptr<Message>(new MiscNode_RetryTriggerMsg(*this));
    }
    void initBlockSize(int block_size)
    {
    	block_size_bits = floorLog2(block_size);
    }
    void setRubySystem(RubySystem *ruby_system)
    {
    }
    // Const accessors methods for each field
    /** \brief Const accessor method for txnId field.
     *  \return txnId field
     */
    const Addr&
    gettxnId() const
    {
        return m_txnId;
    }
    /** \brief Const accessor method for event field.
     *  \return event field
     */
    const MiscNode_Event&
    getevent() const
    {
        return m_event;
    }
    /** \brief Const accessor method for retryDest field.
     *  \return retryDest field
     */
    const MachineID&
    getretryDest() const
    {
        return m_retryDest;
    }
    // Non const Accessors methods for each field
    /** \brief Non-const accessor method for txnId field.
     *  \return txnId field
     */
    Addr&
    gettxnId()
    {
        return m_txnId;
    }
    /** \brief Non-const accessor method for event field.
     *  \return event field
     */
    MiscNode_Event&
    getevent()
    {
        return m_event;
    }
    /** \brief Non-const accessor method for retryDest field.
     *  \return retryDest field
     */
    MachineID&
    getretryDest()
    {
        return m_retryDest;
    }
    // Mutator methods for each field
    /** \brief Mutator method for txnId field */
    void
    settxnId(const Addr& local_txnId)
    {
        m_txnId = local_txnId;
    }
    /** \brief Mutator method for event field */
    void
    setevent(const MiscNode_Event& local_event)
    {
        m_event = local_event;
    }
    /** \brief Mutator method for retryDest field */
    void
    setretryDest(const MachineID& local_retryDest)
    {
        m_retryDest = local_retryDest;
    }
    void print(std::ostream& out) const;
  //private:
    int block_size_bits = 0;
    Addr m_txnId;
    MiscNode_Event m_event;
    MachineID m_retryDest;
    bool functionalRead(Packet* param_pkt);
    bool functionalRead(Packet* param_pkt, WriteMask& param_mask);
    bool functionalWrite(Packet* param_pkt);
};
inline ::std::ostream&
operator<<(::std::ostream& out, const MiscNode_RetryTriggerMsg& obj)
{
    obj.print(out);
    out << ::std::flush;
    return out;
}

} // namespace CHI
} // namespace ruby
} // namespace gem5

#endif // __CHI_MiscNode_RetryTriggerMsg_HH__

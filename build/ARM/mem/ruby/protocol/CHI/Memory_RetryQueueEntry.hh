/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   src/mem/slicc/symbols/Type.py:587
 */

#ifndef __CHI_Memory_RetryQueueEntry_HH__
#define __CHI_Memory_RetryQueueEntry_HH__

#include <iostream>

#include "mem/ruby/slicc_interface/RubySlicc_Util.hh"

#include "mem/ruby/protocol/MachineID.hh"
namespace gem5
{

namespace ruby
{

class RubySystem;

namespace CHI
{

class Memory_RetryQueueEntry
{
  public:
Memory_RetryQueueEntry()
{
        // m_addr has no default
        // m_retryDest has no default
    }
    Memory_RetryQueueEntry(const Memory_RetryQueueEntry&) = default;
    Memory_RetryQueueEntry
    &operator=(const Memory_RetryQueueEntry&) = default;
    Memory_RetryQueueEntry(const Addr& local_addr, const MachineID& local_retryDest)
    {
        m_addr = local_addr;
        m_retryDest = local_retryDest;
    }
    Memory_RetryQueueEntry*
    clone() const
    {
         return new Memory_RetryQueueEntry(*this);
    }
    void initBlockSize(int block_size)
    {
    	block_size_bits = floorLog2(block_size);
    }
    void setRubySystem(RubySystem *ruby_system)
    {
    }
    // Const accessors methods for each field
    /** \brief Const accessor method for addr field.
     *  \return addr field
     */
    const Addr&
    getaddr() const
    {
        return m_addr;
    }
    /** \brief Const accessor method for retryDest field.
     *  \return retryDest field
     */
    const MachineID&
    getretryDest() const
    {
        return m_retryDest;
    }
    // Non const Accessors methods for each field
    /** \brief Non-const accessor method for addr field.
     *  \return addr field
     */
    Addr&
    getaddr()
    {
        return m_addr;
    }
    /** \brief Non-const accessor method for retryDest field.
     *  \return retryDest field
     */
    MachineID&
    getretryDest()
    {
        return m_retryDest;
    }
    // Mutator methods for each field
    /** \brief Mutator method for addr field */
    void
    setaddr(const Addr& local_addr)
    {
        m_addr = local_addr;
    }
    /** \brief Mutator method for retryDest field */
    void
    setretryDest(const MachineID& local_retryDest)
    {
        m_retryDest = local_retryDest;
    }
    void print(std::ostream& out) const;
  //private:
    int block_size_bits = 0;
    /** Line address */
    Addr m_addr;
    /** Retry destination */
    MachineID m_retryDest;
};
inline ::std::ostream&
operator<<(::std::ostream& out, const Memory_RetryQueueEntry& obj)
{
    obj.print(out);
    out << ::std::flush;
    return out;
}

} // namespace CHI
} // namespace ruby
} // namespace gem5

#endif // __CHI_Memory_RetryQueueEntry_HH__

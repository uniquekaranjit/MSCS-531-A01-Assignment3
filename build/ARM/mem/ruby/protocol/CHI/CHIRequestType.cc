/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   src/mem/slicc/symbols/Type.py:1164
 */

#include <cassert>
#include <iostream>
#include <string>

#include "base/logging.hh"
#include "mem/ruby/protocol/CHI/CHIRequestType.hh"

namespace gem5
{

namespace ruby
{

namespace CHI
{

// Code for output operator
::std::ostream&
operator<<(::std::ostream& out, const CHIRequestType& obj)
{
    out << CHIRequestType_to_string(obj);
    out << ::std::flush;
    return out;
}

// Code to convert state to a string
std::string
CHIRequestType_to_string(const CHIRequestType& obj)
{
    switch(obj) {
      case CHIRequestType_Load:
        return "Load";
      case CHIRequestType_Store:
        return "Store";
      case CHIRequestType_StoreLine:
        return "StoreLine";
      case CHIRequestType_AtomicLoad:
        return "AtomicLoad";
      case CHIRequestType_AtomicStore:
        return "AtomicStore";
      case CHIRequestType_DvmTlbi_Initiate:
        return "DvmTlbi_Initiate";
      case CHIRequestType_DvmSync_Initiate:
        return "DvmSync_Initiate";
      case CHIRequestType_DvmSync_ExternCompleted:
        return "DvmSync_ExternCompleted";
      case CHIRequestType_ReadShared:
        return "ReadShared";
      case CHIRequestType_ReadNotSharedDirty:
        return "ReadNotSharedDirty";
      case CHIRequestType_ReadUnique:
        return "ReadUnique";
      case CHIRequestType_ReadOnce:
        return "ReadOnce";
      case CHIRequestType_CleanUnique:
        return "CleanUnique";
      case CHIRequestType_MakeReadUnique:
        return "MakeReadUnique";
      case CHIRequestType_Evict:
        return "Evict";
      case CHIRequestType_WriteBackFull:
        return "WriteBackFull";
      case CHIRequestType_WriteCleanFull:
        return "WriteCleanFull";
      case CHIRequestType_WriteEvictFull:
        return "WriteEvictFull";
      case CHIRequestType_WriteUniquePtl:
        return "WriteUniquePtl";
      case CHIRequestType_WriteUniqueFull:
        return "WriteUniqueFull";
      case CHIRequestType_WriteUniqueZero:
        return "WriteUniqueZero";
      case CHIRequestType_AtomicReturn:
        return "AtomicReturn";
      case CHIRequestType_AtomicNoReturn:
        return "AtomicNoReturn";
      case CHIRequestType_SnpSharedFwd:
        return "SnpSharedFwd";
      case CHIRequestType_SnpNotSharedDirtyFwd:
        return "SnpNotSharedDirtyFwd";
      case CHIRequestType_SnpUniqueFwd:
        return "SnpUniqueFwd";
      case CHIRequestType_SnpOnceFwd:
        return "SnpOnceFwd";
      case CHIRequestType_SnpOnce:
        return "SnpOnce";
      case CHIRequestType_SnpShared:
        return "SnpShared";
      case CHIRequestType_SnpUnique:
        return "SnpUnique";
      case CHIRequestType_SnpCleanInvalid:
        return "SnpCleanInvalid";
      case CHIRequestType_SnpDvmOpSync_P1:
        return "SnpDvmOpSync_P1";
      case CHIRequestType_SnpDvmOpSync_P2:
        return "SnpDvmOpSync_P2";
      case CHIRequestType_SnpDvmOpNonSync_P1:
        return "SnpDvmOpNonSync_P1";
      case CHIRequestType_SnpDvmOpNonSync_P2:
        return "SnpDvmOpNonSync_P2";
      case CHIRequestType_WriteNoSnpPtl:
        return "WriteNoSnpPtl";
      case CHIRequestType_WriteNoSnp:
        return "WriteNoSnp";
      case CHIRequestType_ReadNoSnp:
        return "ReadNoSnp";
      case CHIRequestType_ReadNoSnpSep:
        return "ReadNoSnpSep";
      case CHIRequestType_StashOnceShared:
        return "StashOnceShared";
      case CHIRequestType_StashOnceUnique:
        return "StashOnceUnique";
      case CHIRequestType_DvmOpNonSync:
        return "DvmOpNonSync";
      case CHIRequestType_DvmOpSync:
        return "DvmOpSync";
      case CHIRequestType_null:
        return "null";
      case CHIRequestType_NUM:
        return "NUM (invalid)";
      default:
        panic("Invalid value for type CHIRequestType %d\n", obj);
    }
    // Appease the compiler since this function has a return value
    return "";
}

// Code to convert from a string to the enumeration
CHIRequestType
string_to_CHIRequestType(const std::string& str)
{
    if (str == "Load") {
        return CHIRequestType_Load;
    } else if (str == "Store") {
        return CHIRequestType_Store;
    } else if (str == "StoreLine") {
        return CHIRequestType_StoreLine;
    } else if (str == "AtomicLoad") {
        return CHIRequestType_AtomicLoad;
    } else if (str == "AtomicStore") {
        return CHIRequestType_AtomicStore;
    } else if (str == "DvmTlbi_Initiate") {
        return CHIRequestType_DvmTlbi_Initiate;
    } else if (str == "DvmSync_Initiate") {
        return CHIRequestType_DvmSync_Initiate;
    } else if (str == "DvmSync_ExternCompleted") {
        return CHIRequestType_DvmSync_ExternCompleted;
    } else if (str == "ReadShared") {
        return CHIRequestType_ReadShared;
    } else if (str == "ReadNotSharedDirty") {
        return CHIRequestType_ReadNotSharedDirty;
    } else if (str == "ReadUnique") {
        return CHIRequestType_ReadUnique;
    } else if (str == "ReadOnce") {
        return CHIRequestType_ReadOnce;
    } else if (str == "CleanUnique") {
        return CHIRequestType_CleanUnique;
    } else if (str == "MakeReadUnique") {
        return CHIRequestType_MakeReadUnique;
    } else if (str == "Evict") {
        return CHIRequestType_Evict;
    } else if (str == "WriteBackFull") {
        return CHIRequestType_WriteBackFull;
    } else if (str == "WriteCleanFull") {
        return CHIRequestType_WriteCleanFull;
    } else if (str == "WriteEvictFull") {
        return CHIRequestType_WriteEvictFull;
    } else if (str == "WriteUniquePtl") {
        return CHIRequestType_WriteUniquePtl;
    } else if (str == "WriteUniqueFull") {
        return CHIRequestType_WriteUniqueFull;
    } else if (str == "WriteUniqueZero") {
        return CHIRequestType_WriteUniqueZero;
    } else if (str == "AtomicReturn") {
        return CHIRequestType_AtomicReturn;
    } else if (str == "AtomicNoReturn") {
        return CHIRequestType_AtomicNoReturn;
    } else if (str == "SnpSharedFwd") {
        return CHIRequestType_SnpSharedFwd;
    } else if (str == "SnpNotSharedDirtyFwd") {
        return CHIRequestType_SnpNotSharedDirtyFwd;
    } else if (str == "SnpUniqueFwd") {
        return CHIRequestType_SnpUniqueFwd;
    } else if (str == "SnpOnceFwd") {
        return CHIRequestType_SnpOnceFwd;
    } else if (str == "SnpOnce") {
        return CHIRequestType_SnpOnce;
    } else if (str == "SnpShared") {
        return CHIRequestType_SnpShared;
    } else if (str == "SnpUnique") {
        return CHIRequestType_SnpUnique;
    } else if (str == "SnpCleanInvalid") {
        return CHIRequestType_SnpCleanInvalid;
    } else if (str == "SnpDvmOpSync_P1") {
        return CHIRequestType_SnpDvmOpSync_P1;
    } else if (str == "SnpDvmOpSync_P2") {
        return CHIRequestType_SnpDvmOpSync_P2;
    } else if (str == "SnpDvmOpNonSync_P1") {
        return CHIRequestType_SnpDvmOpNonSync_P1;
    } else if (str == "SnpDvmOpNonSync_P2") {
        return CHIRequestType_SnpDvmOpNonSync_P2;
    } else if (str == "WriteNoSnpPtl") {
        return CHIRequestType_WriteNoSnpPtl;
    } else if (str == "WriteNoSnp") {
        return CHIRequestType_WriteNoSnp;
    } else if (str == "ReadNoSnp") {
        return CHIRequestType_ReadNoSnp;
    } else if (str == "ReadNoSnpSep") {
        return CHIRequestType_ReadNoSnpSep;
    } else if (str == "StashOnceShared") {
        return CHIRequestType_StashOnceShared;
    } else if (str == "StashOnceUnique") {
        return CHIRequestType_StashOnceUnique;
    } else if (str == "DvmOpNonSync") {
        return CHIRequestType_DvmOpNonSync;
    } else if (str == "DvmOpSync") {
        return CHIRequestType_DvmOpSync;
    } else if (str == "null") {
        return CHIRequestType_null;
    } else {
        panic("Invalid string conversion for %s, type CHIRequestType", str);
    }
}

// Code to increment an enumeration type
CHIRequestType&
operator++(CHIRequestType& e)
{
    assert(e < CHIRequestType_NUM);
    return e = CHIRequestType(e+1);
}

} // namespace CHI
} // namespace ruby
} // namespace gem5

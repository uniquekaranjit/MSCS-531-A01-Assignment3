/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   src/mem/slicc/symbols/Type.py:587
 */

#ifndef __CHI_Cache_CacheEntry_HH__
#define __CHI_Cache_CacheEntry_HH__

#include <iostream>

#include "mem/ruby/slicc_interface/RubySlicc_Util.hh"

#include "mem/ruby/protocol/CHI/Cache_State.hh"
#include "mem/ruby/protocol/DataBlock.hh"
#include "mem/ruby/protocol/AbstractCacheEntry.hh"
namespace gem5
{

namespace ruby
{

class RubySystem;

namespace CHI
{

class Cache_CacheEntry :  public AbstractCacheEntry
{
  public:
Cache_CacheEntry()
	:
		m_DataBlk(0)
{
        m_state = Cache_State_null;
         // default value of Cache_State
        // m_DataBlk has no default
        m_HWPrefetched = false; // default for this field
        // m_requestor has no default
    }
    Cache_CacheEntry(const Cache_CacheEntry&) = default;
    Cache_CacheEntry
    &operator=(const Cache_CacheEntry&) = default;
    Cache_CacheEntry(const Cache_State& local_state, const DataBlock& local_DataBlk, const bool& local_HWPrefetched, const RequestorID& local_requestor)
        : AbstractCacheEntry()
    		, m_DataBlk(local_DataBlk)
    {
        m_state = local_state;
        m_HWPrefetched = local_HWPrefetched;
        m_requestor = local_requestor;
    }
    Cache_CacheEntry*
    clone() const
    {
         return new Cache_CacheEntry(*this);
    }
    void initBlockSize(int block_size)
    {
    	block_size_bits = floorLog2(block_size);
    	m_DataBlk.setBlockSize(block_size);
    }
    void setRubySystem(RubySystem *ruby_system)
    {
    }
    // Const accessors methods for each field
    /** \brief Const accessor method for state field.
     *  \return state field
     */
    const Cache_State&
    getstate() const
    {
        return m_state;
    }
    /** \brief Const accessor method for DataBlk field.
     *  \return DataBlk field
     */
    const DataBlock&
    getDataBlk() const
    {
        return m_DataBlk;
    }
    /** \brief Const accessor method for HWPrefetched field.
     *  \return HWPrefetched field
     */
    const bool&
    getHWPrefetched() const
    {
        return m_HWPrefetched;
    }
    /** \brief Const accessor method for requestor field.
     *  \return requestor field
     */
    const RequestorID&
    getrequestor() const
    {
        return m_requestor;
    }
    // Non const Accessors methods for each field
    /** \brief Non-const accessor method for state field.
     *  \return state field
     */
    Cache_State&
    getstate()
    {
        return m_state;
    }
    /** \brief Non-const accessor method for DataBlk field.
     *  \return DataBlk field
     */
    DataBlock&
    getDataBlk()
    {
        return m_DataBlk;
    }
    /** \brief Non-const accessor method for HWPrefetched field.
     *  \return HWPrefetched field
     */
    bool&
    getHWPrefetched()
    {
        return m_HWPrefetched;
    }
    /** \brief Non-const accessor method for requestor field.
     *  \return requestor field
     */
    RequestorID&
    getrequestor()
    {
        return m_requestor;
    }
    // Mutator methods for each field
    /** \brief Mutator method for state field */
    void
    setstate(const Cache_State& local_state)
    {
        m_state = local_state;
    }
    /** \brief Mutator method for DataBlk field */
    void
    setDataBlk(const DataBlock& local_DataBlk)
    {
        m_DataBlk = local_DataBlk;
    }
    /** \brief Mutator method for HWPrefetched field */
    void
    setHWPrefetched(const bool& local_HWPrefetched)
    {
        m_HWPrefetched = local_HWPrefetched;
    }
    /** \brief Mutator method for requestor field */
    void
    setrequestor(const RequestorID& local_requestor)
    {
        m_requestor = local_requestor;
    }
    void print(std::ostream& out) const;
  //private:
    int block_size_bits = 0;
    /** SLICC line state */
    Cache_State m_state;
    /** data for the block */
    DataBlock m_DataBlk;
    /** Set if this cache entry was prefetched */
    bool m_HWPrefetched;
    /** First requestor to fill this block */
    RequestorID m_requestor;
};
inline ::std::ostream&
operator<<(::std::ostream& out, const Cache_CacheEntry& obj)
{
    obj.print(out);
    out << ::std::flush;
    return out;
}

} // namespace CHI
} // namespace ruby
} // namespace gem5

#endif // __CHI_Cache_CacheEntry_HH__

/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:330
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/MaxCapacityPartitioningPolicy.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "mem/cache/tags/partitioning_policies/max_capacity_pp.hh"

#include "base/types.hh"
#include <vector>
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
py::module_ m = m_internal.def_submodule("param_MaxCapacityPartitioningPolicy");
    py::class_<MaxCapacityPartitioningPolicyParams, BasePartitioningPolicyParams, std::unique_ptr<MaxCapacityPartitioningPolicyParams, py::nodelete>>(m, "MaxCapacityPartitioningPolicyParams")
        .def(py::init<>())
        .def("create", &MaxCapacityPartitioningPolicyParams::create)
        .def_readwrite("blk_size", &MaxCapacityPartitioningPolicyParams::blk_size)
        .def_readwrite("cache_size", &MaxCapacityPartitioningPolicyParams::cache_size)
        .def_readwrite("capacities", &MaxCapacityPartitioningPolicyParams::capacities)
        .def_readwrite("partition_ids", &MaxCapacityPartitioningPolicyParams::partition_ids)
        ;

    py::class_<gem5::partitioning_policy::MaxCapacityPartitioningPolicy, gem5::partitioning_policy::BasePartitioningPolicy, std::unique_ptr<gem5::partitioning_policy::MaxCapacityPartitioningPolicy, py::nodelete>>(m, "gem5_COLONS_partitioning_policy_COLONS_MaxCapacityPartitioningPolicy")
        ;

}

static EmbeddedPyBind embed_obj("MaxCapacityPartitioningPolicy", module_init, "BasePartitioningPolicy");

} // namespace gem5
namespace gem5
{

namespace
{

/*
 * If we can't define a default create() method for this params
 * struct because the SimObject doesn't have the right
 * constructor, use template magic to make it so we're actually
 * defining a create method for this class instead.
 */
class DummyMaxCapacityPartitioningPolicyParamsClass
{
  public:
    gem5::partitioning_policy::MaxCapacityPartitioningPolicy *create() const;
};

template <class CxxClass, class Enable=void>
class DummyMaxCapacityPartitioningPolicyShunt;

/*
 * This version directs to the real Params struct and the
 * default behavior of create if there's an appropriate
 * constructor.
 */
template <class CxxClass>
class DummyMaxCapacityPartitioningPolicyShunt<CxxClass, std::enable_if_t<
    std::is_constructible_v<CxxClass, const MaxCapacityPartitioningPolicyParams &>>>
{
  public:
    using Params = MaxCapacityPartitioningPolicyParams;
    static gem5::partitioning_policy::MaxCapacityPartitioningPolicy *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

/*
 * This version diverts to the DummyParamsClass and a dummy
 * implementation of create if the appropriate constructor does
 * not exist.
 */
template <class CxxClass>
class DummyMaxCapacityPartitioningPolicyShunt<CxxClass, std::enable_if_t<
    !std::is_constructible_v<CxxClass, const MaxCapacityPartitioningPolicyParams &>>>
{
  public:
    using Params = DummyMaxCapacityPartitioningPolicyParamsClass;
    static gem5::partitioning_policy::MaxCapacityPartitioningPolicy *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

/*
 * An implementation of either the real Params struct's create
 * method, or the Dummy one. Either an implementation is
 * mandantory since this was shunted off to the dummy class, or
 * one is optional which will override this weak version.
 */
[[maybe_unused]] gem5::partitioning_policy::MaxCapacityPartitioningPolicy *
DummyMaxCapacityPartitioningPolicyShunt<gem5::partitioning_policy::MaxCapacityPartitioningPolicy>::Params::create() const
{
    return DummyMaxCapacityPartitioningPolicyShunt<gem5::partitioning_policy::MaxCapacityPartitioningPolicy>::create(*this);
}

} // namespace gem5

namespace gem5
{
namespace gem5_partitioning_policy_MaxCapacityPartitioningPolicy_create
{

// Base case (no warning)
template<bool>
struct NonDefaultCreate {};

// Specialization with warning for true case
template<>
struct [[deprecated(
        "Warning: MaxCapacityPartitioningPolicy is not constructible from MaxCapacityPartitioningPolicyParams. "
        "It is deprecated to use non-standard `create()` methods. "
        "If you see this warning followed by a linking error, "
        "the most likely problem is MaxCapacityPartitioningPolicy has a parent class with "
        "pure virtual functions.")]] NonDefaultCreate<true> {};

[[maybe_unused]] NonDefaultCreate<
    !std::is_constructible_v<gem5::partitioning_policy::MaxCapacityPartitioningPolicy,
                             const MaxCapacityPartitioningPolicyParams &>> warning_instance;
} // namespace gem5_partitioning_policy_MaxCapacityPartitioningPolicy_create
} // namespace gem5

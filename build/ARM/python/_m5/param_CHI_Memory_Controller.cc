/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:330
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/CHI_Memory_Controller.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "mem/ruby/protocol/CHI/Memory_Controller.hh"

#include "mem/ruby/network/MessageBuffer.hh"
#include "base/types.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
py::module_ m = m_internal.def_submodule("param_CHI_Memory_Controller");
    py::class_<CHI_Memory_ControllerParams, RubyControllerParams, std::unique_ptr<CHI_Memory_ControllerParams, py::nodelete>>(m, "CHI_Memory_ControllerParams")
        .def(py::init<>())
        .def("create", &CHI_Memory_ControllerParams::create)
        .def_readwrite("datIn", &CHI_Memory_ControllerParams::datIn)
        .def_readwrite("datOut", &CHI_Memory_ControllerParams::datOut)
        .def_readwrite("data_channel_size", &CHI_Memory_ControllerParams::data_channel_size)
        .def_readwrite("data_latency", &CHI_Memory_ControllerParams::data_latency)
        .def_readwrite("reqIn", &CHI_Memory_ControllerParams::reqIn)
        .def_readwrite("reqOut", &CHI_Memory_ControllerParams::reqOut)
        .def_readwrite("reqRdy", &CHI_Memory_ControllerParams::reqRdy)
        .def_readwrite("requestToMemory", &CHI_Memory_ControllerParams::requestToMemory)
        .def_readwrite("responseFromMemory", &CHI_Memory_ControllerParams::responseFromMemory)
        .def_readwrite("response_latency", &CHI_Memory_ControllerParams::response_latency)
        .def_readwrite("rspIn", &CHI_Memory_ControllerParams::rspIn)
        .def_readwrite("rspOut", &CHI_Memory_ControllerParams::rspOut)
        .def_readwrite("snpIn", &CHI_Memory_ControllerParams::snpIn)
        .def_readwrite("snpOut", &CHI_Memory_ControllerParams::snpOut)
        .def_readwrite("to_memory_controller_latency", &CHI_Memory_ControllerParams::to_memory_controller_latency)
        .def_readwrite("triggerQueue", &CHI_Memory_ControllerParams::triggerQueue)
        ;

    py::class_<gem5::ruby::CHI::Memory_Controller, gem5::ruby::AbstractController, std::unique_ptr<gem5::ruby::CHI::Memory_Controller, py::nodelete>>(m, "gem5_COLONS_ruby_COLONS_CHI_COLONS_Memory_Controller")
        ;

}

static EmbeddedPyBind embed_obj("CHI_Memory_Controller", module_init, "RubyController");

} // namespace gem5
namespace gem5
{

namespace
{

/*
 * If we can't define a default create() method for this params
 * struct because the SimObject doesn't have the right
 * constructor, use template magic to make it so we're actually
 * defining a create method for this class instead.
 */
class DummyCHI_Memory_ControllerParamsClass
{
  public:
    gem5::ruby::CHI::Memory_Controller *create() const;
};

template <class CxxClass, class Enable=void>
class DummyCHI_Memory_ControllerShunt;

/*
 * This version directs to the real Params struct and the
 * default behavior of create if there's an appropriate
 * constructor.
 */
template <class CxxClass>
class DummyCHI_Memory_ControllerShunt<CxxClass, std::enable_if_t<
    std::is_constructible_v<CxxClass, const CHI_Memory_ControllerParams &>>>
{
  public:
    using Params = CHI_Memory_ControllerParams;
    static gem5::ruby::CHI::Memory_Controller *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

/*
 * This version diverts to the DummyParamsClass and a dummy
 * implementation of create if the appropriate constructor does
 * not exist.
 */
template <class CxxClass>
class DummyCHI_Memory_ControllerShunt<CxxClass, std::enable_if_t<
    !std::is_constructible_v<CxxClass, const CHI_Memory_ControllerParams &>>>
{
  public:
    using Params = DummyCHI_Memory_ControllerParamsClass;
    static gem5::ruby::CHI::Memory_Controller *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

/*
 * An implementation of either the real Params struct's create
 * method, or the Dummy one. Either an implementation is
 * mandantory since this was shunted off to the dummy class, or
 * one is optional which will override this weak version.
 */
[[maybe_unused]] gem5::ruby::CHI::Memory_Controller *
DummyCHI_Memory_ControllerShunt<gem5::ruby::CHI::Memory_Controller>::Params::create() const
{
    return DummyCHI_Memory_ControllerShunt<gem5::ruby::CHI::Memory_Controller>::create(*this);
}

} // namespace gem5

namespace gem5
{
namespace gem5_ruby_CHI_Memory_Controller_create
{

// Base case (no warning)
template<bool>
struct NonDefaultCreate {};

// Specialization with warning for true case
template<>
struct [[deprecated(
        "Warning: CHI_Memory_Controller is not constructible from CHI_Memory_ControllerParams. "
        "It is deprecated to use non-standard `create()` methods. "
        "If you see this warning followed by a linking error, "
        "the most likely problem is CHI_Memory_Controller has a parent class with "
        "pure virtual functions.")]] NonDefaultCreate<true> {};

[[maybe_unused]] NonDefaultCreate<
    !std::is_constructible_v<gem5::ruby::CHI::Memory_Controller,
                             const CHI_Memory_ControllerParams &>> warning_instance;
} // namespace gem5_ruby_CHI_Memory_Controller_create
} // namespace gem5

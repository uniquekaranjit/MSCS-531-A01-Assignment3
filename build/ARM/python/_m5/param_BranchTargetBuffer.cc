/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:330
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/BranchTargetBuffer.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "cpu/pred/btb.hh"

#include "base/types.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
py::module_ m = m_internal.def_submodule("param_BranchTargetBuffer");
    py::class_<BranchTargetBufferParams, ClockedObjectParams, std::unique_ptr<BranchTargetBufferParams, py::nodelete>>(m, "BranchTargetBufferParams")
        .def_readwrite("numThreads", &BranchTargetBufferParams::numThreads)
        ;

    py::class_<gem5::branch_prediction::BranchTargetBuffer, gem5::ClockedObject, std::unique_ptr<gem5::branch_prediction::BranchTargetBuffer, py::nodelete>>(m, "gem5_COLONS_branch_prediction_COLONS_BranchTargetBuffer")
        ;

}

static EmbeddedPyBind embed_obj("BranchTargetBuffer", module_init, "ClockedObject");

} // namespace gem5

/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   build_tools/sim_object_param_struct_cc.py:330
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/PciBridge.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "dev/pci/device.hh"

#include "base/types.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
py::module_ m = m_internal.def_submodule("param_PciBridge");
    py::class_<PciBridgeParams, PciDeviceParams, std::unique_ptr<PciBridgeParams, py::nodelete>>(m, "PciBridgeParams")
        .def_readwrite("BAR0", &PciBridgeParams::BAR0)
        .def_readwrite("BAR1", &PciBridgeParams::BAR1)
        .def_readwrite("BridgeControl", &PciBridgeParams::BridgeControl)
        .def_readwrite("ExpansionROM", &PciBridgeParams::ExpansionROM)
        .def_readwrite("IOBase", &PciBridgeParams::IOBase)
        .def_readwrite("IOBaseUpper", &PciBridgeParams::IOBaseUpper)
        .def_readwrite("IOLimit", &PciBridgeParams::IOLimit)
        .def_readwrite("IOLimitUpper", &PciBridgeParams::IOLimitUpper)
        .def_readwrite("MemoryBase", &PciBridgeParams::MemoryBase)
        .def_readwrite("MemoryLimit", &PciBridgeParams::MemoryLimit)
        .def_readwrite("PrefetchableBaseUpper", &PciBridgeParams::PrefetchableBaseUpper)
        .def_readwrite("PrefetchableLimitUpper", &PciBridgeParams::PrefetchableLimitUpper)
        .def_readwrite("PrefetchableMemoryBase", &PciBridgeParams::PrefetchableMemoryBase)
        .def_readwrite("PrefetchableMemoryLimit", &PciBridgeParams::PrefetchableMemoryLimit)
        .def_readwrite("PrimaryBusNumber", &PciBridgeParams::PrimaryBusNumber)
        .def_readwrite("SecondaryBusNumber", &PciBridgeParams::SecondaryBusNumber)
        .def_readwrite("SecondaryLatencyTimer", &PciBridgeParams::SecondaryLatencyTimer)
        .def_readwrite("SecondaryStatus", &PciBridgeParams::SecondaryStatus)
        .def_readwrite("SubordinateBusNumber", &PciBridgeParams::SubordinateBusNumber)
        ;

    py::class_<gem5::PciBridge, gem5::PciDevice, std::unique_ptr<gem5::PciBridge, py::nodelete>>(m, "gem5_COLONS_PciBridge")
        ;

}

static EmbeddedPyBind embed_obj("PciBridge", module_init, "PciDevice");

} // namespace gem5

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: inst.proto
// Protobuf C++ Version: 6.32.0

#include "inst.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace ProtoMessage {

inline constexpr InstHeader::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        obj_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        tick_freq_{::uint64_t{0u}},
        ver_{0u},
        has_mem_{false} {}

template <typename>
PROTOBUF_CONSTEXPR InstHeader::InstHeader(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(InstHeader_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct InstHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstHeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstHeaderDefaultTypeInternal() {}
  union {
    InstHeader _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstHeaderDefaultTypeInternal _InstHeader_default_instance_;

inline constexpr Inst_MemAccess::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        addr_{::uint64_t{0u}},
        size_{0u},
        mem_flags_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR Inst_MemAccess::Inst_MemAccess(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Inst_MemAccess_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Inst_MemAccessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Inst_MemAccessDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Inst_MemAccessDefaultTypeInternal() {}
  union {
    Inst_MemAccess _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Inst_MemAccessDefaultTypeInternal _Inst_MemAccess_default_instance_;

inline constexpr Inst::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        mem_access_{},
        inst_bytes_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        pc_{::uint64_t{0u}},
        inst_{0u},
        nodeid_{0u},
        tick_{::uint64_t{0u}},
        cpuid_{0u},
        type_{static_cast< ::ProtoMessage::Inst_InstType >(0)},
        inst_flags_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR Inst::Inst(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Inst_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct InstDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstDefaultTypeInternal() {}
  union {
    Inst _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstDefaultTypeInternal _Inst_default_instance_;
}  // namespace ProtoMessage
static const ::_pb::EnumDescriptor* PROTOBUF_NONNULL
    file_level_enum_descriptors_inst_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_inst_2eproto = nullptr;
const ::uint32_t
    TableStruct_inst_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstHeader, _impl_._has_bits_),
        7, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstHeader, _impl_.obj_id_),
        PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstHeader, _impl_.ver_),
        PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstHeader, _impl_.tick_freq_),
        PROTOBUF_FIELD_OFFSET(::ProtoMessage::InstHeader, _impl_.has_mem_),
        0,
        2,
        1,
        3,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst_MemAccess, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst_MemAccess, _impl_.addr_),
        PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst_MemAccess, _impl_.size_),
        PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst_MemAccess, _impl_.mem_flags_),
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, _impl_._has_bits_),
        12, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, _impl_.pc_),
        PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, _impl_.inst_),
        PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, _impl_.inst_bytes_),
        PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, _impl_.nodeid_),
        PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, _impl_.cpuid_),
        PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, _impl_.tick_),
        PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, _impl_.inst_flags_),
        PROTOBUF_FIELD_OFFSET(::ProtoMessage::Inst, _impl_.mem_access_),
        1,
        2,
        0,
        3,
        5,
        4,
        6,
        7,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::ProtoMessage::InstHeader)},
        {11, sizeof(::ProtoMessage::Inst_MemAccess)},
        {20, sizeof(::ProtoMessage::Inst)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::ProtoMessage::_InstHeader_default_instance_._instance,
    &::ProtoMessage::_Inst_MemAccess_default_instance_._instance,
    &::ProtoMessage::_Inst_default_instance_._instance,
};
const char descriptor_table_protodef_inst_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\ninst.proto\022\014ProtoMessage\"P\n\nInstHeader"
    "\022\016\n\006obj_id\030\001 \002(\t\022\016\n\003ver\030\002 \002(\r:\0010\022\021\n\ttick"
    "_freq\030\003 \002(\004\022\017\n\007has_mem\030\004 \002(\010\"\277\006\n\004Inst\022\n\n"
    "\002pc\030\001 \002(\004\022\014\n\004inst\030\002 \001(\007\022\022\n\ninst_bytes\030\t "
    "\001(\014\022\016\n\006nodeid\030\003 \001(\r\022\r\n\005cpuid\030\004 \001(\r\022\014\n\004ti"
    "ck\030\005 \001(\006\022)\n\004type\030\006 \001(\0162\033.ProtoMessage.In"
    "st.InstType\022\022\n\ninst_flags\030\007 \001(\r\0220\n\nmem_a"
    "ccess\030\010 \003(\0132\034.ProtoMessage.Inst.MemAcces"
    "s\032:\n\tMemAccess\022\014\n\004addr\030\001 \002(\004\022\014\n\004size\030\002 \002"
    "(\r\022\021\n\tmem_flags\030\003 \001(\r\"\256\004\n\010InstType\022\010\n\004No"
    "ne\020\000\022\n\n\006IntAlu\020\001\022\n\n\006IntMul\020\002\022\n\n\006IntDiv\020\003"
    "\022\014\n\010FloatAdd\020\004\022\014\n\010FloatCmp\020\005\022\014\n\010FloatCvt"
    "\020\006\022\r\n\tFloatMult\020\007\022\014\n\010FloatDiv\020\010\022\r\n\tFloat"
    "Sqrt\020\t\022\016\n\nSIMDIntAdd\020\n\022\021\n\rSIMDIntAddAcc\020"
    "\013\022\016\n\nSIMDIntAlu\020\014\022\016\n\nSIMDIntCmp\020\r\022\016\n\nSIM"
    "DIntCvt\020\016\022\014\n\010SIMDMisc\020\017\022\017\n\013SIMDIntMult\020\020"
    "\022\022\n\016SIMDIntMultAcc\020\021\022\020\n\014SIMDIntShift\020\022\022\023"
    "\n\017SIMDIntShiftAcc\020\023\022\014\n\010SIMDSqrt\020\024\022\020\n\014SIM"
    "DFloatAdd\020\025\022\020\n\014SIMDFloatAlu\020\026\022\020\n\014SIMDFlo"
    "atCmp\020\027\022\020\n\014SIMDFloatCvt\020\030\022\020\n\014SIMDFloatDi"
    "v\020\031\022\021\n\rSIMDFloatMisc\020\032\022\021\n\rSIMDFloatMult\020"
    "\033\022\024\n\020SIMDFloatMultAdd\020\034\022\021\n\rSIMDFloatSqrt"
    "\020\035\022\013\n\007MemRead\020\036\022\014\n\010MemWrite\020\037\022\r\n\tIprAcce"
    "ss\020 \022\020\n\014InstPrefetch\020!"
};
static ::absl::once_flag descriptor_table_inst_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_inst_2eproto = {
    false,
    false,
    942,
    descriptor_table_protodef_inst_2eproto,
    "inst.proto",
    &descriptor_table_inst_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_inst_2eproto::offsets,
    file_level_enum_descriptors_inst_2eproto,
    file_level_service_descriptors_inst_2eproto,
};
namespace ProtoMessage {
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Inst_InstType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_inst_2eproto);
  return file_level_enum_descriptors_inst_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t Inst_InstType_internal_data_[] = {
    2228224u, 0u, };
// ===================================================================

class InstHeader::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<InstHeader>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(InstHeader, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

InstHeader::InstHeader(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, InstHeader_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoMessage.InstHeader)
}
PROTOBUF_NDEBUG_INLINE InstHeader::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::ProtoMessage::InstHeader& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        obj_id_(arena, from.obj_id_) {}

InstHeader::InstHeader(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const InstHeader& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, InstHeader_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  InstHeader* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, tick_freq_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, tick_freq_),
           offsetof(Impl_, has_mem_) -
               offsetof(Impl_, tick_freq_) +
               sizeof(Impl_::has_mem_));

  // @@protoc_insertion_point(copy_constructor:ProtoMessage.InstHeader)
}
PROTOBUF_NDEBUG_INLINE InstHeader::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        obj_id_(arena) {}

inline void InstHeader::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, tick_freq_),
           0,
           offsetof(Impl_, has_mem_) -
               offsetof(Impl_, tick_freq_) +
               sizeof(Impl_::has_mem_));
}
InstHeader::~InstHeader() {
  // @@protoc_insertion_point(destructor:ProtoMessage.InstHeader)
  SharedDtor(*this);
}
inline void InstHeader::SharedDtor(MessageLite& self) {
  InstHeader& this_ = static_cast<InstHeader&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.obj_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL InstHeader::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) InstHeader(arena);
}
constexpr auto InstHeader::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(InstHeader),
                                            alignof(InstHeader));
}
constexpr auto InstHeader::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_InstHeader_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          InstHeader::IsInitializedImpl,
          &InstHeader::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<InstHeader>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &InstHeader::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<InstHeader>(), &InstHeader::ByteSizeLong,
              &InstHeader::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(InstHeader, _impl_._cached_size_),
          false,
      },
      &InstHeader::kDescriptorMethods,
      &descriptor_table_inst_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull InstHeader_class_data_ =
        InstHeader::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
InstHeader::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&InstHeader_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(InstHeader_class_data_.tc_table);
  return InstHeader_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 38, 2>
InstHeader::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(InstHeader, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    InstHeader_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ProtoMessage::InstHeader>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // required bool has_mem = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(InstHeader, _impl_.has_mem_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(InstHeader, _impl_.has_mem_)}},
    // required string obj_id = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(InstHeader, _impl_.obj_id_)}},
    // required uint32 ver = 2 [default = 0];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InstHeader, _impl_.ver_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(InstHeader, _impl_.ver_)}},
    // required uint64 tick_freq = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(InstHeader, _impl_.tick_freq_), 1>(),
     {24, 1, 0, PROTOBUF_FIELD_OFFSET(InstHeader, _impl_.tick_freq_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required string obj_id = 1;
    {PROTOBUF_FIELD_OFFSET(InstHeader, _impl_.obj_id_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // required uint32 ver = 2 [default = 0];
    {PROTOBUF_FIELD_OFFSET(InstHeader, _impl_.ver_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // required uint64 tick_freq = 3;
    {PROTOBUF_FIELD_OFFSET(InstHeader, _impl_.tick_freq_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // required bool has_mem = 4;
    {PROTOBUF_FIELD_OFFSET(InstHeader, _impl_.has_mem_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\27\6\0\0\0\0\0\0"
    "ProtoMessage.InstHeader"
    "obj_id"
  }},
};
PROTOBUF_NOINLINE void InstHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoMessage.InstHeader)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001U) != 0) {
    _impl_.obj_id_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x0000000eU) != 0) {
    ::memset(&_impl_.tick_freq_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.has_mem_) -
        reinterpret_cast<char*>(&_impl_.tick_freq_)) + sizeof(_impl_.has_mem_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL InstHeader::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const InstHeader& this_ = static_cast<const InstHeader&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL InstHeader::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const InstHeader& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMessage.InstHeader)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // required string obj_id = 1;
  if ((cached_has_bits & 0x00000001U) != 0) {
    const ::std::string& _s = this_._internal_obj_id();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "ProtoMessage.InstHeader.obj_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // required uint32 ver = 2 [default = 0];
  if ((cached_has_bits & 0x00000004U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this_._internal_ver(), target);
  }

  // required uint64 tick_freq = 3;
  if ((cached_has_bits & 0x00000002U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this_._internal_tick_freq(), target);
  }

  // required bool has_mem = 4;
  if ((cached_has_bits & 0x00000008U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this_._internal_has_mem(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMessage.InstHeader)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t InstHeader::ByteSizeLong(const MessageLite& base) {
  const InstHeader& this_ = static_cast<const InstHeader&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t InstHeader::ByteSizeLong() const {
  const InstHeader& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:ProtoMessage.InstHeader)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000008U & cached_has_bits) * 2;
  if ((cached_has_bits & 0x00000007U) != 0) {
    // required string obj_id = 1;
    if ((cached_has_bits & 0x00000001U) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_obj_id());
    }
    // required uint64 tick_freq = 3;
    if ((cached_has_bits & 0x00000002U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this_._internal_tick_freq());
    }
    // required uint32 ver = 2 [default = 0];
    if ((cached_has_bits & 0x00000004U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_ver());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void InstHeader::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<InstHeader*>(&to_msg);
  auto& from = static_cast<const InstHeader&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:ProtoMessage.InstHeader)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _this->_internal_set_obj_id(from._internal_obj_id());
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _this->_impl_.tick_freq_ = from._impl_.tick_freq_;
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      _this->_impl_.ver_ = from._impl_.ver_;
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      _this->_impl_.has_mem_ = from._impl_.has_mem_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InstHeader::CopyFrom(const InstHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoMessage.InstHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool InstHeader::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const InstHeader&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void InstHeader::InternalSwap(InstHeader* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.obj_id_, &other->_impl_.obj_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstHeader, _impl_.has_mem_)
      + sizeof(InstHeader::_impl_.has_mem_)
      - PROTOBUF_FIELD_OFFSET(InstHeader, _impl_.tick_freq_)>(
          reinterpret_cast<char*>(&_impl_.tick_freq_),
          reinterpret_cast<char*>(&other->_impl_.tick_freq_));
}

::google::protobuf::Metadata InstHeader::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Inst_MemAccess::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Inst_MemAccess>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Inst_MemAccess, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Inst_MemAccess::Inst_MemAccess(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Inst_MemAccess_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoMessage.Inst.MemAccess)
}
Inst_MemAccess::Inst_MemAccess(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Inst_MemAccess& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Inst_MemAccess_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE Inst_MemAccess::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void Inst_MemAccess::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, addr_),
           0,
           offsetof(Impl_, mem_flags_) -
               offsetof(Impl_, addr_) +
               sizeof(Impl_::mem_flags_));
}
Inst_MemAccess::~Inst_MemAccess() {
  // @@protoc_insertion_point(destructor:ProtoMessage.Inst.MemAccess)
  SharedDtor(*this);
}
inline void Inst_MemAccess::SharedDtor(MessageLite& self) {
  Inst_MemAccess& this_ = static_cast<Inst_MemAccess&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Inst_MemAccess::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Inst_MemAccess(arena);
}
constexpr auto Inst_MemAccess::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Inst_MemAccess),
                                            alignof(Inst_MemAccess));
}
constexpr auto Inst_MemAccess::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Inst_MemAccess_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          Inst_MemAccess::IsInitializedImpl,
          &Inst_MemAccess::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Inst_MemAccess>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Inst_MemAccess::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Inst_MemAccess>(), &Inst_MemAccess::ByteSizeLong,
              &Inst_MemAccess::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Inst_MemAccess, _impl_._cached_size_),
          false,
      },
      &Inst_MemAccess::kDescriptorMethods,
      &descriptor_table_inst_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Inst_MemAccess_class_data_ =
        Inst_MemAccess::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Inst_MemAccess::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Inst_MemAccess_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Inst_MemAccess_class_data_.tc_table);
  return Inst_MemAccess_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2>
Inst_MemAccess::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Inst_MemAccess, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    Inst_MemAccess_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ProtoMessage::Inst_MemAccess>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required uint64 addr = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Inst_MemAccess, _impl_.addr_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(Inst_MemAccess, _impl_.addr_)}},
    // required uint32 size = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Inst_MemAccess, _impl_.size_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(Inst_MemAccess, _impl_.size_)}},
    // optional uint32 mem_flags = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Inst_MemAccess, _impl_.mem_flags_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(Inst_MemAccess, _impl_.mem_flags_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required uint64 addr = 1;
    {PROTOBUF_FIELD_OFFSET(Inst_MemAccess, _impl_.addr_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // required uint32 size = 2;
    {PROTOBUF_FIELD_OFFSET(Inst_MemAccess, _impl_.size_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 mem_flags = 3;
    {PROTOBUF_FIELD_OFFSET(Inst_MemAccess, _impl_.mem_flags_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void Inst_MemAccess::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoMessage.Inst.MemAccess)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    ::memset(&_impl_.addr_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.mem_flags_) -
        reinterpret_cast<char*>(&_impl_.addr_)) + sizeof(_impl_.mem_flags_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Inst_MemAccess::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Inst_MemAccess& this_ = static_cast<const Inst_MemAccess&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Inst_MemAccess::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Inst_MemAccess& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMessage.Inst.MemAccess)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // required uint64 addr = 1;
  if ((cached_has_bits & 0x00000001U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this_._internal_addr(), target);
  }

  // required uint32 size = 2;
  if ((cached_has_bits & 0x00000002U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this_._internal_size(), target);
  }

  // optional uint32 mem_flags = 3;
  if ((cached_has_bits & 0x00000004U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this_._internal_mem_flags(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMessage.Inst.MemAccess)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Inst_MemAccess::ByteSizeLong(const MessageLite& base) {
  const Inst_MemAccess& this_ = static_cast<const Inst_MemAccess&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Inst_MemAccess::ByteSizeLong() const {
  const Inst_MemAccess& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:ProtoMessage.Inst.MemAccess)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    // required uint64 addr = 1;
    if ((cached_has_bits & 0x00000001U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this_._internal_addr());
    }
    // required uint32 size = 2;
    if ((cached_has_bits & 0x00000002U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_size());
    }
  }
   {
    // optional uint32 mem_flags = 3;
    if ((cached_has_bits & 0x00000004U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_mem_flags());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Inst_MemAccess::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Inst_MemAccess*>(&to_msg);
  auto& from = static_cast<const Inst_MemAccess&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:ProtoMessage.Inst.MemAccess)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _this->_impl_.addr_ = from._impl_.addr_;
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _this->_impl_.size_ = from._impl_.size_;
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      _this->_impl_.mem_flags_ = from._impl_.mem_flags_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Inst_MemAccess::CopyFrom(const Inst_MemAccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoMessage.Inst.MemAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Inst_MemAccess::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const Inst_MemAccess&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void Inst_MemAccess::InternalSwap(Inst_MemAccess* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Inst_MemAccess, _impl_.mem_flags_)
      + sizeof(Inst_MemAccess::_impl_.mem_flags_)
      - PROTOBUF_FIELD_OFFSET(Inst_MemAccess, _impl_.addr_)>(
          reinterpret_cast<char*>(&_impl_.addr_),
          reinterpret_cast<char*>(&other->_impl_.addr_));
}

::google::protobuf::Metadata Inst_MemAccess::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Inst::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Inst>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Inst, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

Inst::Inst(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Inst_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtoMessage.Inst)
}
PROTOBUF_NDEBUG_INLINE Inst::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::ProtoMessage::Inst& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        mem_access_{visibility, arena, from.mem_access_},
        inst_bytes_(arena, from.inst_bytes_) {}

Inst::Inst(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Inst& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Inst_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Inst* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pc_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, pc_),
           offsetof(Impl_, inst_flags_) -
               offsetof(Impl_, pc_) +
               sizeof(Impl_::inst_flags_));

  // @@protoc_insertion_point(copy_constructor:ProtoMessage.Inst)
}
PROTOBUF_NDEBUG_INLINE Inst::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        mem_access_{visibility, arena},
        inst_bytes_(arena) {}

inline void Inst::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pc_),
           0,
           offsetof(Impl_, inst_flags_) -
               offsetof(Impl_, pc_) +
               sizeof(Impl_::inst_flags_));
}
Inst::~Inst() {
  // @@protoc_insertion_point(destructor:ProtoMessage.Inst)
  SharedDtor(*this);
}
inline void Inst::SharedDtor(MessageLite& self) {
  Inst& this_ = static_cast<Inst&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.inst_bytes_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Inst::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Inst(arena);
}
constexpr auto Inst::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Inst, _impl_.mem_access_) +
          decltype(Inst::_impl_.mem_access_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Inst), alignof(Inst), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Inst::PlacementNew_,
                                 sizeof(Inst),
                                 alignof(Inst));
  }
}
constexpr auto Inst::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Inst_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          Inst::IsInitializedImpl,
          &Inst::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Inst>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Inst::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Inst>(), &Inst::ByteSizeLong,
              &Inst::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Inst, _impl_._cached_size_),
          false,
      },
      &Inst::kDescriptorMethods,
      &descriptor_table_inst_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Inst_class_data_ =
        Inst::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Inst::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Inst_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Inst_class_data_.tc_table);
  return Inst_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 2, 0, 2>
Inst::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Inst, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    Inst_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ProtoMessage::Inst>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required uint64 pc = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Inst, _impl_.pc_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(Inst, _impl_.pc_)}},
    // optional fixed32 inst = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 2, 0, PROTOBUF_FIELD_OFFSET(Inst, _impl_.inst_)}},
    // optional uint32 nodeid = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Inst, _impl_.nodeid_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(Inst, _impl_.nodeid_)}},
    // optional uint32 cpuid = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Inst, _impl_.cpuid_), 5>(),
     {32, 5, 0, PROTOBUF_FIELD_OFFSET(Inst, _impl_.cpuid_)}},
    // optional fixed64 tick = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 4, 0, PROTOBUF_FIELD_OFFSET(Inst, _impl_.tick_)}},
    // optional .ProtoMessage.Inst.InstType type = 6;
    {::_pbi::TcParser::FastEr0S1,
     {48, 6, 33, PROTOBUF_FIELD_OFFSET(Inst, _impl_.type_)}},
    // optional uint32 inst_flags = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Inst, _impl_.inst_flags_), 7>(),
     {56, 7, 0, PROTOBUF_FIELD_OFFSET(Inst, _impl_.inst_flags_)}},
    // repeated .ProtoMessage.Inst.MemAccess mem_access = 8;
    {::_pbi::TcParser::FastMtR1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(Inst, _impl_.mem_access_)}},
    // optional bytes inst_bytes = 9;
    {::_pbi::TcParser::FastBS1,
     {74, 0, 0, PROTOBUF_FIELD_OFFSET(Inst, _impl_.inst_bytes_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // required uint64 pc = 1;
    {PROTOBUF_FIELD_OFFSET(Inst, _impl_.pc_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional fixed32 inst = 2;
    {PROTOBUF_FIELD_OFFSET(Inst, _impl_.inst_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 nodeid = 3;
    {PROTOBUF_FIELD_OFFSET(Inst, _impl_.nodeid_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 cpuid = 4;
    {PROTOBUF_FIELD_OFFSET(Inst, _impl_.cpuid_), _Internal::kHasBitsOffset + 5, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed64 tick = 5;
    {PROTOBUF_FIELD_OFFSET(Inst, _impl_.tick_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional .ProtoMessage.Inst.InstType type = 6;
    {PROTOBUF_FIELD_OFFSET(Inst, _impl_.type_), _Internal::kHasBitsOffset + 6, 1, (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 inst_flags = 7;
    {PROTOBUF_FIELD_OFFSET(Inst, _impl_.inst_flags_), _Internal::kHasBitsOffset + 7, 0, (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // repeated .ProtoMessage.Inst.MemAccess mem_access = 8;
    {PROTOBUF_FIELD_OFFSET(Inst, _impl_.mem_access_), -1, 0, (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bytes inst_bytes = 9;
    {PROTOBUF_FIELD_OFFSET(Inst, _impl_.inst_bytes_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::ProtoMessage::Inst_MemAccess>()},
      {0, 33},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void Inst::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoMessage.Inst)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mem_access_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001U) != 0) {
    _impl_.inst_bytes_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x000000feU) != 0) {
    ::memset(&_impl_.pc_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.inst_flags_) -
        reinterpret_cast<char*>(&_impl_.pc_)) + sizeof(_impl_.inst_flags_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Inst::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Inst& this_ = static_cast<const Inst&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Inst::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Inst& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMessage.Inst)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // required uint64 pc = 1;
  if ((cached_has_bits & 0x00000002U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this_._internal_pc(), target);
  }

  // optional fixed32 inst = 2;
  if ((cached_has_bits & 0x00000004U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        2, this_._internal_inst(), target);
  }

  // optional uint32 nodeid = 3;
  if ((cached_has_bits & 0x00000008U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this_._internal_nodeid(), target);
  }

  // optional uint32 cpuid = 4;
  if ((cached_has_bits & 0x00000020U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this_._internal_cpuid(), target);
  }

  // optional fixed64 tick = 5;
  if ((cached_has_bits & 0x00000010U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        5, this_._internal_tick(), target);
  }

  // optional .ProtoMessage.Inst.InstType type = 6;
  if ((cached_has_bits & 0x00000040U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this_._internal_type(), target);
  }

  // optional uint32 inst_flags = 7;
  if ((cached_has_bits & 0x00000080U) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this_._internal_inst_flags(), target);
  }

  // repeated .ProtoMessage.Inst.MemAccess mem_access = 8;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_mem_access_size());
       i < n; i++) {
    const auto& repfield = this_._internal_mem_access().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            8, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // optional bytes inst_bytes = 9;
  if ((cached_has_bits & 0x00000001U) != 0) {
    const ::std::string& _s = this_._internal_inst_bytes();
    target = stream->WriteBytesMaybeAliased(9, _s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMessage.Inst)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Inst::ByteSizeLong(const MessageLite& base) {
  const Inst& this_ = static_cast<const Inst&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Inst::ByteSizeLong() const {
  const Inst& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:ProtoMessage.Inst)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .ProtoMessage.Inst.MemAccess mem_access = 8;
    {
      total_size += 1UL * this_._internal_mem_access_size();
      for (const auto& msg : this_._internal_mem_access()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000010U & cached_has_bits) * 9;
  total_size += static_cast<bool>(0x00000004U & cached_has_bits) * 5;
   {
    // optional bytes inst_bytes = 9;
    if ((cached_has_bits & 0x00000001U) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_inst_bytes());
    }
  }
   {
    // required uint64 pc = 1;
    if ((cached_has_bits & 0x00000002U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this_._internal_pc());
    }
  }
  if ((cached_has_bits & 0x000000e8U) != 0) {
    // optional uint32 nodeid = 3;
    if ((cached_has_bits & 0x00000008U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_nodeid());
    }
    // optional uint32 cpuid = 4;
    if ((cached_has_bits & 0x00000020U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_cpuid());
    }
    // optional .ProtoMessage.Inst.InstType type = 6;
    if ((cached_has_bits & 0x00000040U) != 0) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
    }
    // optional uint32 inst_flags = 7;
    if ((cached_has_bits & 0x00000080U) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_inst_flags());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Inst::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Inst*>(&to_msg);
  auto& from = static_cast<const Inst&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:ProtoMessage.Inst)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_mem_access()->MergeFrom(
      from._internal_mem_access());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _this->_internal_set_inst_bytes(from._internal_inst_bytes());
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _this->_impl_.pc_ = from._impl_.pc_;
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      _this->_impl_.inst_ = from._impl_.inst_;
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      _this->_impl_.nodeid_ = from._impl_.nodeid_;
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      _this->_impl_.tick_ = from._impl_.tick_;
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      _this->_impl_.cpuid_ = from._impl_.cpuid_;
    }
    if ((cached_has_bits & 0x00000040U) != 0) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if ((cached_has_bits & 0x00000080U) != 0) {
      _this->_impl_.inst_flags_ = from._impl_.inst_flags_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Inst::CopyFrom(const Inst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoMessage.Inst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Inst::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const Inst&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this_._internal_mem_access()))
    return false;
  return true;
}

void Inst::InternalSwap(Inst* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mem_access_.InternalSwap(&other->_impl_.mem_access_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.inst_bytes_, &other->_impl_.inst_bytes_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Inst, _impl_.inst_flags_)
      + sizeof(Inst::_impl_.inst_flags_)
      - PROTOBUF_FIELD_OFFSET(Inst, _impl_.pc_)>(
          reinterpret_cast<char*>(&_impl_.pc_),
          reinterpret_cast<char*>(&other->_impl_.pc_));
}

::google::protobuf::Metadata Inst::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace ProtoMessage
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_inst_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"

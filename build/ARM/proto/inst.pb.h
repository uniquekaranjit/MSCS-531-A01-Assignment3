// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: inst.proto
// Protobuf C++ Version: 6.32.0

#ifndef inst_2eproto_2epb_2eh
#define inst_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6032000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_inst_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_inst_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_inst_2eproto;
}  // extern "C"
namespace ProtoMessage {
enum Inst_InstType : int;
extern const uint32_t Inst_InstType_internal_data_[];
class Inst;
struct InstDefaultTypeInternal;
extern InstDefaultTypeInternal _Inst_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Inst_class_data_;
class InstHeader;
struct InstHeaderDefaultTypeInternal;
extern InstHeaderDefaultTypeInternal _InstHeader_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull InstHeader_class_data_;
class Inst_MemAccess;
struct Inst_MemAccessDefaultTypeInternal;
extern Inst_MemAccessDefaultTypeInternal _Inst_MemAccess_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Inst_MemAccess_class_data_;
}  // namespace ProtoMessage
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::ProtoMessage::Inst_InstType_internal_data_>
    internal::EnumTraitsImpl::value<::ProtoMessage::Inst_InstType>;
}  // namespace protobuf
}  // namespace google

namespace ProtoMessage {
enum Inst_InstType : int {
  Inst_InstType_None = 0,
  Inst_InstType_IntAlu = 1,
  Inst_InstType_IntMul = 2,
  Inst_InstType_IntDiv = 3,
  Inst_InstType_FloatAdd = 4,
  Inst_InstType_FloatCmp = 5,
  Inst_InstType_FloatCvt = 6,
  Inst_InstType_FloatMult = 7,
  Inst_InstType_FloatDiv = 8,
  Inst_InstType_FloatSqrt = 9,
  Inst_InstType_SIMDIntAdd = 10,
  Inst_InstType_SIMDIntAddAcc = 11,
  Inst_InstType_SIMDIntAlu = 12,
  Inst_InstType_SIMDIntCmp = 13,
  Inst_InstType_SIMDIntCvt = 14,
  Inst_InstType_SIMDMisc = 15,
  Inst_InstType_SIMDIntMult = 16,
  Inst_InstType_SIMDIntMultAcc = 17,
  Inst_InstType_SIMDIntShift = 18,
  Inst_InstType_SIMDIntShiftAcc = 19,
  Inst_InstType_SIMDSqrt = 20,
  Inst_InstType_SIMDFloatAdd = 21,
  Inst_InstType_SIMDFloatAlu = 22,
  Inst_InstType_SIMDFloatCmp = 23,
  Inst_InstType_SIMDFloatCvt = 24,
  Inst_InstType_SIMDFloatDiv = 25,
  Inst_InstType_SIMDFloatMisc = 26,
  Inst_InstType_SIMDFloatMult = 27,
  Inst_InstType_SIMDFloatMultAdd = 28,
  Inst_InstType_SIMDFloatSqrt = 29,
  Inst_InstType_MemRead = 30,
  Inst_InstType_MemWrite = 31,
  Inst_InstType_IprAccess = 32,
  Inst_InstType_InstPrefetch = 33,
};

extern const uint32_t Inst_InstType_internal_data_[];
inline constexpr Inst_InstType Inst_InstType_InstType_MIN =
    static_cast<Inst_InstType>(0);
inline constexpr Inst_InstType Inst_InstType_InstType_MAX =
    static_cast<Inst_InstType>(33);
inline bool Inst_InstType_IsValid(int value) {
  return 0 <= value && value <= 33;
}
inline constexpr int Inst_InstType_InstType_ARRAYSIZE = 33 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Inst_InstType_descriptor();
template <typename T>
const ::std::string& Inst_InstType_Name(T value) {
  static_assert(::std::is_same<T, Inst_InstType>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to InstType_Name().");
  return Inst_InstType_Name(static_cast<Inst_InstType>(value));
}
template <>
inline const ::std::string& Inst_InstType_Name(Inst_InstType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Inst_InstType_descriptor, 0, 33>(
      static_cast<int>(value));
}
inline bool Inst_InstType_Parse(
    ::absl::string_view name, Inst_InstType* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Inst_InstType>(Inst_InstType_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class InstHeader final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ProtoMessage.InstHeader) */ {
 public:
  inline InstHeader() : InstHeader(nullptr) {}
  ~InstHeader() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(InstHeader* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(InstHeader));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InstHeader(::google::protobuf::internal::ConstantInitialized);

  inline InstHeader(const InstHeader& from) : InstHeader(nullptr, from) {}
  inline InstHeader(InstHeader&& from) noexcept
      : InstHeader(nullptr, ::std::move(from)) {}
  inline InstHeader& operator=(const InstHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstHeader& operator=(InstHeader&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstHeader& default_instance() {
    return *reinterpret_cast<const InstHeader*>(
        &_InstHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(InstHeader& a, InstHeader& b) { a.Swap(&b); }
  inline void Swap(InstHeader* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstHeader* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstHeader* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<InstHeader>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InstHeader& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const InstHeader& from) { InstHeader::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(InstHeader* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ProtoMessage.InstHeader"; }

 protected:
  explicit InstHeader(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  InstHeader(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const InstHeader& from);
  InstHeader(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, InstHeader&& from) noexcept
      : InstHeader(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kObjIdFieldNumber = 1,
    kTickFreqFieldNumber = 3,
    kVerFieldNumber = 2,
    kHasMemFieldNumber = 4,
  };
  // required string obj_id = 1;
  bool has_obj_id() const;
  void clear_obj_id() ;
  const ::std::string& obj_id() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_obj_id(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_obj_id();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_obj_id();
  void set_allocated_obj_id(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_obj_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_obj_id(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_obj_id();

  public:
  // required uint64 tick_freq = 3;
  bool has_tick_freq() const;
  void clear_tick_freq() ;
  ::uint64_t tick_freq() const;
  void set_tick_freq(::uint64_t value);

  private:
  ::uint64_t _internal_tick_freq() const;
  void _internal_set_tick_freq(::uint64_t value);

  public:
  // required uint32 ver = 2 [default = 0];
  bool has_ver() const;
  void clear_ver() ;
  ::uint32_t ver() const;
  void set_ver(::uint32_t value);

  private:
  ::uint32_t _internal_ver() const;
  void _internal_set_ver(::uint32_t value);

  public:
  // required bool has_mem = 4;
  bool has_has_mem() const;
  void clear_has_mem() ;
  bool has_mem() const;
  void set_has_mem(bool value);

  private:
  bool _internal_has_mem() const;
  void _internal_set_has_mem(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ProtoMessage.InstHeader)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4,
                                   0, 38,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const InstHeader& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr obj_id_;
    ::uint64_t tick_freq_;
    ::uint32_t ver_;
    bool has_mem_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_inst_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull InstHeader_class_data_;
// -------------------------------------------------------------------

class Inst_MemAccess final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ProtoMessage.Inst.MemAccess) */ {
 public:
  inline Inst_MemAccess() : Inst_MemAccess(nullptr) {}
  ~Inst_MemAccess() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Inst_MemAccess* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Inst_MemAccess));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Inst_MemAccess(::google::protobuf::internal::ConstantInitialized);

  inline Inst_MemAccess(const Inst_MemAccess& from) : Inst_MemAccess(nullptr, from) {}
  inline Inst_MemAccess(Inst_MemAccess&& from) noexcept
      : Inst_MemAccess(nullptr, ::std::move(from)) {}
  inline Inst_MemAccess& operator=(const Inst_MemAccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline Inst_MemAccess& operator=(Inst_MemAccess&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Inst_MemAccess& default_instance() {
    return *reinterpret_cast<const Inst_MemAccess*>(
        &_Inst_MemAccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Inst_MemAccess& a, Inst_MemAccess& b) { a.Swap(&b); }
  inline void Swap(Inst_MemAccess* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Inst_MemAccess* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Inst_MemAccess* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Inst_MemAccess>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Inst_MemAccess& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Inst_MemAccess& from) { Inst_MemAccess::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Inst_MemAccess* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ProtoMessage.Inst.MemAccess"; }

 protected:
  explicit Inst_MemAccess(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Inst_MemAccess(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Inst_MemAccess& from);
  Inst_MemAccess(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Inst_MemAccess&& from) noexcept
      : Inst_MemAccess(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAddrFieldNumber = 1,
    kSizeFieldNumber = 2,
    kMemFlagsFieldNumber = 3,
  };
  // required uint64 addr = 1;
  bool has_addr() const;
  void clear_addr() ;
  ::uint64_t addr() const;
  void set_addr(::uint64_t value);

  private:
  ::uint64_t _internal_addr() const;
  void _internal_set_addr(::uint64_t value);

  public:
  // required uint32 size = 2;
  bool has_size() const;
  void clear_size() ;
  ::uint32_t size() const;
  void set_size(::uint32_t value);

  private:
  ::uint32_t _internal_size() const;
  void _internal_set_size(::uint32_t value);

  public:
  // optional uint32 mem_flags = 3;
  bool has_mem_flags() const;
  void clear_mem_flags() ;
  ::uint32_t mem_flags() const;
  void set_mem_flags(::uint32_t value);

  private:
  ::uint32_t _internal_mem_flags() const;
  void _internal_set_mem_flags(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ProtoMessage.Inst.MemAccess)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Inst_MemAccess& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint64_t addr_;
    ::uint32_t size_;
    ::uint32_t mem_flags_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_inst_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Inst_MemAccess_class_data_;
// -------------------------------------------------------------------

class Inst final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ProtoMessage.Inst) */ {
 public:
  inline Inst() : Inst(nullptr) {}
  ~Inst() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Inst* PROTOBUF_NONNULL msg, ::std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Inst));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Inst(::google::protobuf::internal::ConstantInitialized);

  inline Inst(const Inst& from) : Inst(nullptr, from) {}
  inline Inst(Inst&& from) noexcept
      : Inst(nullptr, ::std::move(from)) {}
  inline Inst& operator=(const Inst& from) {
    CopyFrom(from);
    return *this;
  }
  inline Inst& operator=(Inst&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Inst& default_instance() {
    return *reinterpret_cast<const Inst*>(
        &_Inst_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Inst& a, Inst& b) { a.Swap(&b); }
  inline void Swap(Inst* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Inst* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Inst* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Inst>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Inst& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Inst& from) { Inst::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Inst* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ProtoMessage.Inst"; }

 protected:
  explicit Inst(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Inst(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Inst& from);
  Inst(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Inst&& from) noexcept
      : Inst(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using MemAccess = Inst_MemAccess;
  using InstType = Inst_InstType;
  static constexpr InstType None = Inst_InstType_None;
  static constexpr InstType IntAlu = Inst_InstType_IntAlu;
  static constexpr InstType IntMul = Inst_InstType_IntMul;
  static constexpr InstType IntDiv = Inst_InstType_IntDiv;
  static constexpr InstType FloatAdd = Inst_InstType_FloatAdd;
  static constexpr InstType FloatCmp = Inst_InstType_FloatCmp;
  static constexpr InstType FloatCvt = Inst_InstType_FloatCvt;
  static constexpr InstType FloatMult = Inst_InstType_FloatMult;
  static constexpr InstType FloatDiv = Inst_InstType_FloatDiv;
  static constexpr InstType FloatSqrt = Inst_InstType_FloatSqrt;
  static constexpr InstType SIMDIntAdd = Inst_InstType_SIMDIntAdd;
  static constexpr InstType SIMDIntAddAcc = Inst_InstType_SIMDIntAddAcc;
  static constexpr InstType SIMDIntAlu = Inst_InstType_SIMDIntAlu;
  static constexpr InstType SIMDIntCmp = Inst_InstType_SIMDIntCmp;
  static constexpr InstType SIMDIntCvt = Inst_InstType_SIMDIntCvt;
  static constexpr InstType SIMDMisc = Inst_InstType_SIMDMisc;
  static constexpr InstType SIMDIntMult = Inst_InstType_SIMDIntMult;
  static constexpr InstType SIMDIntMultAcc = Inst_InstType_SIMDIntMultAcc;
  static constexpr InstType SIMDIntShift = Inst_InstType_SIMDIntShift;
  static constexpr InstType SIMDIntShiftAcc = Inst_InstType_SIMDIntShiftAcc;
  static constexpr InstType SIMDSqrt = Inst_InstType_SIMDSqrt;
  static constexpr InstType SIMDFloatAdd = Inst_InstType_SIMDFloatAdd;
  static constexpr InstType SIMDFloatAlu = Inst_InstType_SIMDFloatAlu;
  static constexpr InstType SIMDFloatCmp = Inst_InstType_SIMDFloatCmp;
  static constexpr InstType SIMDFloatCvt = Inst_InstType_SIMDFloatCvt;
  static constexpr InstType SIMDFloatDiv = Inst_InstType_SIMDFloatDiv;
  static constexpr InstType SIMDFloatMisc = Inst_InstType_SIMDFloatMisc;
  static constexpr InstType SIMDFloatMult = Inst_InstType_SIMDFloatMult;
  static constexpr InstType SIMDFloatMultAdd = Inst_InstType_SIMDFloatMultAdd;
  static constexpr InstType SIMDFloatSqrt = Inst_InstType_SIMDFloatSqrt;
  static constexpr InstType MemRead = Inst_InstType_MemRead;
  static constexpr InstType MemWrite = Inst_InstType_MemWrite;
  static constexpr InstType IprAccess = Inst_InstType_IprAccess;
  static constexpr InstType InstPrefetch = Inst_InstType_InstPrefetch;
  static inline bool InstType_IsValid(int value) {
    return Inst_InstType_IsValid(value);
  }
  static constexpr InstType InstType_MIN = Inst_InstType_InstType_MIN;
  static constexpr InstType InstType_MAX = Inst_InstType_InstType_MAX;
  static constexpr int InstType_ARRAYSIZE = Inst_InstType_InstType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL InstType_descriptor() {
    return Inst_InstType_descriptor();
  }
  template <typename T>
  static inline const ::std::string& InstType_Name(T value) {
    return Inst_InstType_Name(value);
  }
  static inline bool InstType_Parse(
      ::absl::string_view name, InstType* PROTOBUF_NONNULL value) {
    return Inst_InstType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kMemAccessFieldNumber = 8,
    kInstBytesFieldNumber = 9,
    kPcFieldNumber = 1,
    kInstFieldNumber = 2,
    kNodeidFieldNumber = 3,
    kTickFieldNumber = 5,
    kCpuidFieldNumber = 4,
    kTypeFieldNumber = 6,
    kInstFlagsFieldNumber = 7,
  };
  // repeated .ProtoMessage.Inst.MemAccess mem_access = 8;
  int mem_access_size() const;
  private:
  int _internal_mem_access_size() const;

  public:
  void clear_mem_access() ;
  ::ProtoMessage::Inst_MemAccess* PROTOBUF_NONNULL mutable_mem_access(int index);
  ::google::protobuf::RepeatedPtrField<::ProtoMessage::Inst_MemAccess>* PROTOBUF_NONNULL mutable_mem_access();

  private:
  const ::google::protobuf::RepeatedPtrField<::ProtoMessage::Inst_MemAccess>& _internal_mem_access() const;
  ::google::protobuf::RepeatedPtrField<::ProtoMessage::Inst_MemAccess>* PROTOBUF_NONNULL _internal_mutable_mem_access();
  public:
  const ::ProtoMessage::Inst_MemAccess& mem_access(int index) const;
  ::ProtoMessage::Inst_MemAccess* PROTOBUF_NONNULL add_mem_access();
  const ::google::protobuf::RepeatedPtrField<::ProtoMessage::Inst_MemAccess>& mem_access() const;
  // optional bytes inst_bytes = 9;
  bool has_inst_bytes() const;
  void clear_inst_bytes() ;
  const ::std::string& inst_bytes() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_inst_bytes(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_inst_bytes();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_inst_bytes();
  void set_allocated_inst_bytes(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_inst_bytes() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_inst_bytes(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_inst_bytes();

  public:
  // required uint64 pc = 1;
  bool has_pc() const;
  void clear_pc() ;
  ::uint64_t pc() const;
  void set_pc(::uint64_t value);

  private:
  ::uint64_t _internal_pc() const;
  void _internal_set_pc(::uint64_t value);

  public:
  // optional fixed32 inst = 2;
  bool has_inst() const;
  void clear_inst() ;
  ::uint32_t inst() const;
  void set_inst(::uint32_t value);

  private:
  ::uint32_t _internal_inst() const;
  void _internal_set_inst(::uint32_t value);

  public:
  // optional uint32 nodeid = 3;
  bool has_nodeid() const;
  void clear_nodeid() ;
  ::uint32_t nodeid() const;
  void set_nodeid(::uint32_t value);

  private:
  ::uint32_t _internal_nodeid() const;
  void _internal_set_nodeid(::uint32_t value);

  public:
  // optional fixed64 tick = 5;
  bool has_tick() const;
  void clear_tick() ;
  ::uint64_t tick() const;
  void set_tick(::uint64_t value);

  private:
  ::uint64_t _internal_tick() const;
  void _internal_set_tick(::uint64_t value);

  public:
  // optional uint32 cpuid = 4;
  bool has_cpuid() const;
  void clear_cpuid() ;
  ::uint32_t cpuid() const;
  void set_cpuid(::uint32_t value);

  private:
  ::uint32_t _internal_cpuid() const;
  void _internal_set_cpuid(::uint32_t value);

  public:
  // optional .ProtoMessage.Inst.InstType type = 6;
  bool has_type() const;
  void clear_type() ;
  ::ProtoMessage::Inst_InstType type() const;
  void set_type(::ProtoMessage::Inst_InstType value);

  private:
  ::ProtoMessage::Inst_InstType _internal_type() const;
  void _internal_set_type(::ProtoMessage::Inst_InstType value);

  public:
  // optional uint32 inst_flags = 7;
  bool has_inst_flags() const;
  void clear_inst_flags() ;
  ::uint32_t inst_flags() const;
  void set_inst_flags(::uint32_t value);

  private:
  ::uint32_t _internal_inst_flags() const;
  void _internal_set_inst_flags(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ProtoMessage.Inst)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 9,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Inst& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::ProtoMessage::Inst_MemAccess > mem_access_;
    ::google::protobuf::internal::ArenaStringPtr inst_bytes_;
    ::uint64_t pc_;
    ::uint32_t inst_;
    ::uint32_t nodeid_;
    ::uint64_t tick_;
    ::uint32_t cpuid_;
    int type_;
    ::uint32_t inst_flags_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_inst_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Inst_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// InstHeader

// required string obj_id = 1;
inline bool InstHeader::has_obj_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001U) != 0;
  return value;
}
inline void InstHeader::clear_obj_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.obj_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001U;
}
inline const ::std::string& InstHeader::obj_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ProtoMessage.InstHeader.obj_id)
  return _internal_obj_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void InstHeader::set_obj_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.obj_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ProtoMessage.InstHeader.obj_id)
}
inline ::std::string* PROTOBUF_NONNULL InstHeader::mutable_obj_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_obj_id();
  // @@protoc_insertion_point(field_mutable:ProtoMessage.InstHeader.obj_id)
  return _s;
}
inline const ::std::string& InstHeader::_internal_obj_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.obj_id_.Get();
}
inline void InstHeader::_internal_set_obj_id(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.obj_id_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL InstHeader::_internal_mutable_obj_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  return _impl_.obj_id_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE InstHeader::release_obj_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ProtoMessage.InstHeader.obj_id)
  if ((_impl_._has_bits_[0] & 0x00000001U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001U;
  auto* released = _impl_.obj_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.obj_id_.Set("", GetArena());
  }
  return released;
}
inline void InstHeader::set_allocated_obj_id(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001U;
  }
  _impl_.obj_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.obj_id_.IsDefault()) {
    _impl_.obj_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoMessage.InstHeader.obj_id)
}

// required uint32 ver = 2 [default = 0];
inline bool InstHeader::has_ver() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004U) != 0;
  return value;
}
inline void InstHeader::clear_ver() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ver_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004U;
}
inline ::uint32_t InstHeader::ver() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.InstHeader.ver)
  return _internal_ver();
}
inline void InstHeader::set_ver(::uint32_t value) {
  _internal_set_ver(value);
  _impl_._has_bits_[0] |= 0x00000004U;
  // @@protoc_insertion_point(field_set:ProtoMessage.InstHeader.ver)
}
inline ::uint32_t InstHeader::_internal_ver() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ver_;
}
inline void InstHeader::_internal_set_ver(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ver_ = value;
}

// required uint64 tick_freq = 3;
inline bool InstHeader::has_tick_freq() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002U) != 0;
  return value;
}
inline void InstHeader::clear_tick_freq() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tick_freq_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002U;
}
inline ::uint64_t InstHeader::tick_freq() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.InstHeader.tick_freq)
  return _internal_tick_freq();
}
inline void InstHeader::set_tick_freq(::uint64_t value) {
  _internal_set_tick_freq(value);
  _impl_._has_bits_[0] |= 0x00000002U;
  // @@protoc_insertion_point(field_set:ProtoMessage.InstHeader.tick_freq)
}
inline ::uint64_t InstHeader::_internal_tick_freq() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tick_freq_;
}
inline void InstHeader::_internal_set_tick_freq(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tick_freq_ = value;
}

// required bool has_mem = 4;
inline bool InstHeader::has_has_mem() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008U) != 0;
  return value;
}
inline void InstHeader::clear_has_mem() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_mem_ = false;
  _impl_._has_bits_[0] &= ~0x00000008U;
}
inline bool InstHeader::has_mem() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.InstHeader.has_mem)
  return _internal_has_mem();
}
inline void InstHeader::set_has_mem(bool value) {
  _internal_set_has_mem(value);
  _impl_._has_bits_[0] |= 0x00000008U;
  // @@protoc_insertion_point(field_set:ProtoMessage.InstHeader.has_mem)
}
inline bool InstHeader::_internal_has_mem() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.has_mem_;
}
inline void InstHeader::_internal_set_has_mem(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_mem_ = value;
}

// -------------------------------------------------------------------

// Inst_MemAccess

// required uint64 addr = 1;
inline bool Inst_MemAccess::has_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001U) != 0;
  return value;
}
inline void Inst_MemAccess::clear_addr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.addr_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001U;
}
inline ::uint64_t Inst_MemAccess::addr() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Inst.MemAccess.addr)
  return _internal_addr();
}
inline void Inst_MemAccess::set_addr(::uint64_t value) {
  _internal_set_addr(value);
  _impl_._has_bits_[0] |= 0x00000001U;
  // @@protoc_insertion_point(field_set:ProtoMessage.Inst.MemAccess.addr)
}
inline ::uint64_t Inst_MemAccess::_internal_addr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.addr_;
}
inline void Inst_MemAccess::_internal_set_addr(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.addr_ = value;
}

// required uint32 size = 2;
inline bool Inst_MemAccess::has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002U) != 0;
  return value;
}
inline void Inst_MemAccess::clear_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002U;
}
inline ::uint32_t Inst_MemAccess::size() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Inst.MemAccess.size)
  return _internal_size();
}
inline void Inst_MemAccess::set_size(::uint32_t value) {
  _internal_set_size(value);
  _impl_._has_bits_[0] |= 0x00000002U;
  // @@protoc_insertion_point(field_set:ProtoMessage.Inst.MemAccess.size)
}
inline ::uint32_t Inst_MemAccess::_internal_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.size_;
}
inline void Inst_MemAccess::_internal_set_size(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_ = value;
}

// optional uint32 mem_flags = 3;
inline bool Inst_MemAccess::has_mem_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004U) != 0;
  return value;
}
inline void Inst_MemAccess::clear_mem_flags() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mem_flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004U;
}
inline ::uint32_t Inst_MemAccess::mem_flags() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Inst.MemAccess.mem_flags)
  return _internal_mem_flags();
}
inline void Inst_MemAccess::set_mem_flags(::uint32_t value) {
  _internal_set_mem_flags(value);
  _impl_._has_bits_[0] |= 0x00000004U;
  // @@protoc_insertion_point(field_set:ProtoMessage.Inst.MemAccess.mem_flags)
}
inline ::uint32_t Inst_MemAccess::_internal_mem_flags() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mem_flags_;
}
inline void Inst_MemAccess::_internal_set_mem_flags(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mem_flags_ = value;
}

// -------------------------------------------------------------------

// Inst

// required uint64 pc = 1;
inline bool Inst::has_pc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002U) != 0;
  return value;
}
inline void Inst::clear_pc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pc_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002U;
}
inline ::uint64_t Inst::pc() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Inst.pc)
  return _internal_pc();
}
inline void Inst::set_pc(::uint64_t value) {
  _internal_set_pc(value);
  _impl_._has_bits_[0] |= 0x00000002U;
  // @@protoc_insertion_point(field_set:ProtoMessage.Inst.pc)
}
inline ::uint64_t Inst::_internal_pc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pc_;
}
inline void Inst::_internal_set_pc(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pc_ = value;
}

// optional fixed32 inst = 2;
inline bool Inst::has_inst() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004U) != 0;
  return value;
}
inline void Inst::clear_inst() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inst_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004U;
}
inline ::uint32_t Inst::inst() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Inst.inst)
  return _internal_inst();
}
inline void Inst::set_inst(::uint32_t value) {
  _internal_set_inst(value);
  _impl_._has_bits_[0] |= 0x00000004U;
  // @@protoc_insertion_point(field_set:ProtoMessage.Inst.inst)
}
inline ::uint32_t Inst::_internal_inst() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.inst_;
}
inline void Inst::_internal_set_inst(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inst_ = value;
}

// optional bytes inst_bytes = 9;
inline bool Inst::has_inst_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001U) != 0;
  return value;
}
inline void Inst::clear_inst_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inst_bytes_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001U;
}
inline const ::std::string& Inst::inst_bytes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ProtoMessage.Inst.inst_bytes)
  return _internal_inst_bytes();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Inst::set_inst_bytes(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.inst_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ProtoMessage.Inst.inst_bytes)
}
inline ::std::string* PROTOBUF_NONNULL Inst::mutable_inst_bytes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_inst_bytes();
  // @@protoc_insertion_point(field_mutable:ProtoMessage.Inst.inst_bytes)
  return _s;
}
inline const ::std::string& Inst::_internal_inst_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.inst_bytes_.Get();
}
inline void Inst::_internal_set_inst_bytes(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  _impl_.inst_bytes_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL Inst::_internal_mutable_inst_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001U;
  return _impl_.inst_bytes_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE Inst::release_inst_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ProtoMessage.Inst.inst_bytes)
  if ((_impl_._has_bits_[0] & 0x00000001U) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001U;
  auto* released = _impl_.inst_bytes_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.inst_bytes_.Set("", GetArena());
  }
  return released;
}
inline void Inst::set_allocated_inst_bytes(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001U;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001U;
  }
  _impl_.inst_bytes_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.inst_bytes_.IsDefault()) {
    _impl_.inst_bytes_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoMessage.Inst.inst_bytes)
}

// optional uint32 nodeid = 3;
inline bool Inst::has_nodeid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008U) != 0;
  return value;
}
inline void Inst::clear_nodeid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nodeid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008U;
}
inline ::uint32_t Inst::nodeid() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Inst.nodeid)
  return _internal_nodeid();
}
inline void Inst::set_nodeid(::uint32_t value) {
  _internal_set_nodeid(value);
  _impl_._has_bits_[0] |= 0x00000008U;
  // @@protoc_insertion_point(field_set:ProtoMessage.Inst.nodeid)
}
inline ::uint32_t Inst::_internal_nodeid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nodeid_;
}
inline void Inst::_internal_set_nodeid(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nodeid_ = value;
}

// optional uint32 cpuid = 4;
inline bool Inst::has_cpuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020U) != 0;
  return value;
}
inline void Inst::clear_cpuid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cpuid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020U;
}
inline ::uint32_t Inst::cpuid() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Inst.cpuid)
  return _internal_cpuid();
}
inline void Inst::set_cpuid(::uint32_t value) {
  _internal_set_cpuid(value);
  _impl_._has_bits_[0] |= 0x00000020U;
  // @@protoc_insertion_point(field_set:ProtoMessage.Inst.cpuid)
}
inline ::uint32_t Inst::_internal_cpuid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cpuid_;
}
inline void Inst::_internal_set_cpuid(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cpuid_ = value;
}

// optional fixed64 tick = 5;
inline bool Inst::has_tick() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010U) != 0;
  return value;
}
inline void Inst::clear_tick() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tick_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010U;
}
inline ::uint64_t Inst::tick() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Inst.tick)
  return _internal_tick();
}
inline void Inst::set_tick(::uint64_t value) {
  _internal_set_tick(value);
  _impl_._has_bits_[0] |= 0x00000010U;
  // @@protoc_insertion_point(field_set:ProtoMessage.Inst.tick)
}
inline ::uint64_t Inst::_internal_tick() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tick_;
}
inline void Inst::_internal_set_tick(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tick_ = value;
}

// optional .ProtoMessage.Inst.InstType type = 6;
inline bool Inst::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040U) != 0;
  return value;
}
inline void Inst::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040U;
}
inline ::ProtoMessage::Inst_InstType Inst::type() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Inst.type)
  return _internal_type();
}
inline void Inst::set_type(::ProtoMessage::Inst_InstType value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000040U;
  // @@protoc_insertion_point(field_set:ProtoMessage.Inst.type)
}
inline ::ProtoMessage::Inst_InstType Inst::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ProtoMessage::Inst_InstType>(_impl_.type_);
}
inline void Inst::_internal_set_type(::ProtoMessage::Inst_InstType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);

                                          assert(::google::protobuf::internal::ValidateEnum(
                                              value, ::ProtoMessage::Inst_InstType_internal_data_));
                                          _impl_.type_ = value;
}

// optional uint32 inst_flags = 7;
inline bool Inst::has_inst_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080U) != 0;
  return value;
}
inline void Inst::clear_inst_flags() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inst_flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080U;
}
inline ::uint32_t Inst::inst_flags() const {
  // @@protoc_insertion_point(field_get:ProtoMessage.Inst.inst_flags)
  return _internal_inst_flags();
}
inline void Inst::set_inst_flags(::uint32_t value) {
  _internal_set_inst_flags(value);
  _impl_._has_bits_[0] |= 0x00000080U;
  // @@protoc_insertion_point(field_set:ProtoMessage.Inst.inst_flags)
}
inline ::uint32_t Inst::_internal_inst_flags() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.inst_flags_;
}
inline void Inst::_internal_set_inst_flags(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inst_flags_ = value;
}

// repeated .ProtoMessage.Inst.MemAccess mem_access = 8;
inline int Inst::_internal_mem_access_size() const {
  return _internal_mem_access().size();
}
inline int Inst::mem_access_size() const {
  return _internal_mem_access_size();
}
inline void Inst::clear_mem_access() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mem_access_.Clear();
}
inline ::ProtoMessage::Inst_MemAccess* PROTOBUF_NONNULL Inst::mutable_mem_access(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ProtoMessage.Inst.mem_access)
  return _internal_mutable_mem_access()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ProtoMessage::Inst_MemAccess>* PROTOBUF_NONNULL Inst::mutable_mem_access()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ProtoMessage.Inst.mem_access)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_mem_access();
}
inline const ::ProtoMessage::Inst_MemAccess& Inst::mem_access(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ProtoMessage.Inst.mem_access)
  return _internal_mem_access().Get(index);
}
inline ::ProtoMessage::Inst_MemAccess* PROTOBUF_NONNULL Inst::add_mem_access()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::ProtoMessage::Inst_MemAccess* _add = _internal_mutable_mem_access()->Add();
  // @@protoc_insertion_point(field_add:ProtoMessage.Inst.mem_access)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ProtoMessage::Inst_MemAccess>& Inst::mem_access() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ProtoMessage.Inst.mem_access)
  return _internal_mem_access();
}
inline const ::google::protobuf::RepeatedPtrField<::ProtoMessage::Inst_MemAccess>&
Inst::_internal_mem_access() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mem_access_;
}
inline ::google::protobuf::RepeatedPtrField<::ProtoMessage::Inst_MemAccess>* PROTOBUF_NONNULL
Inst::_internal_mutable_mem_access() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.mem_access_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace ProtoMessage


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::ProtoMessage::Inst_InstType> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::ProtoMessage::Inst_InstType>() {
  return ::ProtoMessage::Inst_InstType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // inst_2eproto_2epb_2eh


# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftINCRDECRleftORleftANDleftEQNEleftLTGTLEGEleftRIGHTSHIFTLEFTSHIFTleftPLUSDASHleftSTARSLASHMODrightNOTUMINUSACTION AMP AND ASSIGN CHECK_ALLOCATE CHECK_NEXT_CYCLE CHECK_PROBE CHECK_STOP_SLOTS CONST DASH DECR DEFER_ENQUEUEING DOT DOUBLE_COLON ELSE ENQUEUE ENUM EQ EXTERN_TYPE FLOATNUMBER GE GLOBAL GT IDENT IF INCLUDE INCR IN_PORT IS_INVALID IS_VALID LE LEFTSHIFT LIT_BOOL LT MACHINE MOD NE NEW NOT NUMBER OOD OR OUT_PORT PEEK PLUS PROTOCOL RETURN RIGHTSHIFT SEMI SLASH STALL_AND_WAIT STAR STATE_DECL STATIC_CAST STRING STRUCT TRANS VOID WAKEUP_PORTfile : declsempty :decls : declsxdeclsx : decl declsxdeclsx : emptydecl : PROTOCOL STRING exprs SEMIdecl : INCLUDE STRING SEMIdecl : MACHINE '(' enumeration ')' ':' obj_decls '{' decls '}'decl : MACHINE '(' enumeration pairs ')' ':' obj_decls '{' decls '}'decl : ACTION '(' ident pairs ')' statementsdecl : IN_PORT '(' ident ',' type ',' var pairs ')' statementsdecl : OUT_PORT '(' ident ',' type ',' var pairs ')' SEMIdecl : TRANS '(' idents ',' idents ',' ident_or_star ')' identsdecl : TRANS '(' idents ',' idents ')' identsdecl : TRANS '(' idents ',' idents ',' ident_or_star ')' idents identsdecl : TRANS '(' idents ',' idents ')' idents identsdecl : EXTERN_TYPE '(' type pairs ')' SEMIdecl : GLOBAL '(' type pairs ')' '{' type_members '}'decl : STRUCT '(' type pairs ')' '{' type_members '}'decl : ENUM '(' type pairs ')' '{' type_enums   '}'decl : STATE_DECL '(' type pairs ')' '{' type_states   '}'obj_decls : obj_decl obj_declsobj_decls : emptytype_members : type_member type_memberstype_members : emptytype_member : obj_decl\n| func_decl\n| func_defdecl : obj_declobj_decl : type ident pairs SEMIobj_decl : type STAR ident pairs SEMIobj_decl : type ident ASSIGN expr SEMIobj_decl : type STAR ident ASSIGN expr SEMIdecl : func_declfunc_decl :  void ident '(' params ')' pairs SEMI\n| type ident '(' params ')' pairs SEMIfunc_decl :  void ident '(' types ')' pairs SEMI\n| type ident '(' types ')' pairs SEMIdecl : func_deffunc_def : void ident '(' params ')' pairs statements\n| type ident '(' params ')' pairs statementstype_enums : type_enum type_enumstype_enums : emptytype_enum : ident pairs SEMItype_states : type_state type_statestype_states : emptytype_state : ident ',' enumeration pairs SEMIparams : param ',' paramsparams : paramparams : emptyparam : type identparam : type STAR identparam : type AMP identparam : CONST type AMP identparam : type STAR ident ASSIGN STRINGparam : type ident ASSIGN NUMBERparam : type ident ASSIGN LIT_BOOLparam : type ident ASSIGN STRINGtypes : type ',' typestypes : typetypes : emptytypestr : typestr DOUBLE_COLON identtypestr : identtype : typestrvoid : VOIDidents : '{' identx '}'idents : identidentx : ident SEMI identx\n| ident ',' identxidentx : ident identxidentx : emptyident : IDENTident_or_star : ident\n| STARpairs : ',' pairsxpairs : emptypairsx : pair ',' pairsxpairsx : pairpair : ident '=' STRING\n| ident '=' ident\n| ident '=' NUMBERpair : STRINGstatements : '{' statements_inner '}'statements : '{' '}'statements_inner : statement statements_innerstatements_inner : statementexprs : expr ',' exprsexprs : exprexprs : emptystatement : expr SEMIstatement : expr ASSIGN expr SEMIstatement : ENQUEUE '(' var ',' type ')' statementsstatement : ENQUEUE '(' var ',' type ',' expr ')' statementsstatement : ENQUEUE '(' var ',' type ',' expr ',' expr ')' statementsstatement : DEFER_ENQUEUEING '(' var ',' type ')' statementsstatement : STALL_AND_WAIT '(' var ',' var ')' SEMIstatement : WAKEUP_PORT '(' var ',' var ')' SEMIstatement : PEEK '(' var ',' type pairs ')' statementsstatement : CHECK_ALLOCATE '(' var ')' SEMIstatement : CHECK_NEXT_CYCLE '(' ')' SEMIstatement : CHECK_STOP_SLOTS '(' var ',' STRING ',' STRING ')' SEMIstatement : CHECK_PROBE '(' var ',' var ')' SEMIstatement : RETURN expr SEMIstatement : if_statementif_statement : IF '(' expr ')' statementsif_statement : IF '(' expr ')' statements ELSE statementsif_statement : IF '(' expr ')' statements ELSE if_statementaexpr : STATIC_CAST '(' type ',' expr ')'aexpr : STATIC_CAST '(' type ',' STRING ',' expr ')'aexpr : varaexpr : type identaexpr : literalaexpr : enumerationaexpr : ident '(' exprs ')'aexpr : NEW typeaexpr : OODaexpr : aexpr DOT identaexpr : aexpr DOT ident '(' exprs ')'aexpr : aexpr '[' exprs ']'aexpr : type DOUBLE_COLON ident '(' exprs ')'expr : aexprexpr : expr STAR  expr\n| expr SLASH expr\n| expr MOD   expr\n| expr PLUS  expr\n| expr DASH  expr\n| expr LT    expr\n| expr GT    expr\n| expr LE    expr\n| expr GE    expr\n| expr EQ    expr\n| expr NE    expr\n| expr AND   expr\n| expr OR    expr\n| expr RIGHTSHIFT expr\n| expr LEFTSHIFT  exprexpr : NOT expr\n| INCR expr\n| DECR expr\n| DASH expr %prec UMINUSaexpr : '(' expr ')'aexpr : IS_VALID '(' expr ')'aexpr : IS_INVALID '(' expr ')'literal : STRINGliteral : NUMBERliteral : FLOATNUMBERliteral : LIT_BOOLenumeration : ident ':' identvar : ident"
    
_lr_action_items = {'PROTOCOL':([0,4,20,21,22,26,67,81,89,125,180,191,195,218,237,243,254,259,280,281,282,288,304,305,306,312,313,332,333,335,336,339,343,359,363,375,376,377,],[6,6,-29,-34,-39,-72,-7,-67,-6,-30,-32,-31,-66,-10,-33,-17,6,-84,-36,-41,-38,-14,-35,-40,-37,6,-83,-16,-18,-19,-20,-21,-8,-13,-9,-11,-12,-15,]),'INCLUDE':([0,4,20,21,22,26,67,81,89,125,180,191,195,218,237,243,254,259,280,281,282,288,304,305,306,312,313,332,333,335,336,339,343,359,363,375,376,377,],[7,7,-29,-34,-39,-72,-7,-67,-6,-30,-32,-31,-66,-10,-33,-17,7,-84,-36,-41,-38,-14,-35,-40,-37,7,-83,-16,-18,-19,-20,-21,-8,-13,-9,-11,-12,-15,]),'MACHINE':([0,4,20,21,22,26,67,81,89,125,180,191,195,218,237,243,254,259,280,281,282,288,304,305,306,312,313,332,333,335,336,339,343,359,363,375,376,377,],[8,8,-29,-34,-39,-72,-7,-67,-6,-30,-32,-31,-66,-10,-33,-17,8,-84,-36,-41,-38,-14,-35,-40,-37,8,-83,-16,-18,-19,-20,-21,-8,-13,-9,-11,-12,-15,]),'ACTION':([0,4,20,21,22,26,67,81,89,125,180,191,195,218,237,243,254,259,280,281,282,288,304,305,306,312,313,332,333,335,336,339,343,359,363,375,376,377,],[9,9,-29,-34,-39,-72,-7,-67,-6,-30,-32,-31,-66,-10,-33,-17,9,-84,-36,-41,-38,-14,-35,-40,-37,9,-83,-16,-18,-19,-20,-21,-8,-13,-9,-11,-12,-15,]),'IN_PORT':([0,4,20,21,22,26,67,81,89,125,180,191,195,218,237,243,254,259,280,281,282,288,304,305,306,312,313,332,333,335,336,339,343,359,363,375,376,377,],[11,11,-29,-34,-39,-72,-7,-67,-6,-30,-32,-31,-66,-10,-33,-17,11,-84,-36,-41,-38,-14,-35,-40,-37,11,-83,-16,-18,-19,-20,-21,-8,-13,-9,-11,-12,-15,]),'OUT_PORT':([0,4,20,21,22,26,67,81,89,125,180,191,195,218,237,243,254,259,280,281,282,288,304,305,306,312,313,332,333,335,336,339,343,359,363,375,376,377,],[13,13,-29,-34,-39,-72,-7,-67,-6,-30,-32,-31,-66,-10,-33,-17,13,-84,-36,-41,-38,-14,-35,-40,-37,13,-83,-16,-18,-19,-20,-21,-8,-13,-9,-11,-12,-15,]),'TRANS':([0,4,20,21,22,26,67,81,89,125,180,191,195,218,237,243,254,259,280,281,282,288,304,305,306,312,313,332,333,335,336,339,343,359,363,375,376,377,],[14,14,-29,-34,-39,-72,-7,-67,-6,-30,-32,-31,-66,-10,-33,-17,14,-84,-36,-41,-38,-14,-35,-40,-37,14,-83,-16,-18,-19,-20,-21,-8,-13,-9,-11,-12,-15,]),'EXTERN_TYPE':([0,4,20,21,22,26,67,81,89,125,180,191,195,218,237,243,254,259,280,281,282,288,304,305,306,312,313,332,333,335,336,339,343,359,363,375,376,377,],[15,15,-29,-34,-39,-72,-7,-67,-6,-30,-32,-31,-66,-10,-33,-17,15,-84,-36,-41,-38,-14,-35,-40,-37,15,-83,-16,-18,-19,-20,-21,-8,-13,-9,-11,-12,-15,]),'GLOBAL':([0,4,20,21,22,26,67,81,89,125,180,191,195,218,237,243,254,259,280,281,282,288,304,305,306,312,313,332,333,335,336,339,343,359,363,375,376,377,],[16,16,-29,-34,-39,-72,-7,-67,-6,-30,-32,-31,-66,-10,-33,-17,16,-84,-36,-41,-38,-14,-35,-40,-37,16,-83,-16,-18,-19,-20,-21,-8,-13,-9,-11,-12,-15,]),'STRUCT':([0,4,20,21,22,26,67,81,89,125,180,191,195,218,237,243,254,259,280,281,282,288,304,305,306,312,313,332,333,335,336,339,343,359,363,375,376,377,],[17,17,-29,-34,-39,-72,-7,-67,-6,-30,-32,-31,-66,-10,-33,-17,17,-84,-36,-41,-38,-14,-35,-40,-37,17,-83,-16,-18,-19,-20,-21,-8,-13,-9,-11,-12,-15,]),'ENUM':([0,4,20,21,22,26,67,81,89,125,180,191,195,218,237,243,254,259,280,281,282,288,304,305,306,312,313,332,333,335,336,339,343,359,363,375,376,377,],[18,18,-29,-34,-39,-72,-7,-67,-6,-30,-32,-31,-66,-10,-33,-17,18,-84,-36,-41,-38,-14,-35,-40,-37,18,-83,-16,-18,-19,-20,-21,-8,-13,-9,-11,-12,-15,]),'STATE_DECL':([0,4,20,21,22,26,67,81,89,125,180,191,195,218,237,243,254,259,280,281,282,288,304,305,306,312,313,332,333,335,336,339,343,359,363,375,376,377,],[19,19,-29,-34,-39,-72,-7,-67,-6,-30,-32,-31,-66,-10,-33,-17,19,-84,-36,-41,-38,-14,-35,-40,-37,19,-83,-16,-18,-19,-20,-21,-8,-13,-9,-11,-12,-15,]),'$end':([0,1,2,3,4,5,20,21,22,26,27,67,81,89,125,180,191,195,218,237,243,259,280,281,282,288,304,305,306,313,332,333,335,336,339,343,359,363,375,376,377,],[-2,0,-1,-3,-2,-5,-29,-34,-39,-72,-4,-7,-67,-6,-30,-32,-31,-66,-10,-33,-17,-84,-36,-41,-38,-14,-35,-40,-37,-83,-16,-18,-19,-20,-21,-8,-13,-9,-11,-12,-15,]),'VOID':([0,4,20,21,22,26,67,81,89,125,180,191,195,218,237,243,244,245,254,259,280,281,282,288,290,292,293,294,304,305,306,312,313,332,333,335,336,339,343,359,363,375,376,377,],[25,25,-29,-34,-39,-72,-7,-67,-6,-30,-32,-31,-66,-10,-33,-17,25,25,25,-84,-36,-41,-38,-14,25,-26,-27,-28,-35,-40,-37,25,-83,-16,-18,-19,-20,-21,-8,-13,-9,-11,-12,-15,]),'IDENT':([0,4,10,12,20,21,22,23,24,25,26,28,30,31,32,34,35,36,37,38,39,40,41,43,49,50,51,52,54,55,57,60,67,73,74,75,80,81,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,112,115,116,117,119,120,124,125,127,132,138,139,140,142,176,180,181,183,184,187,189,190,191,195,196,198,206,208,209,214,216,217,218,219,220,231,232,237,238,239,240,243,244,245,246,247,254,259,260,271,272,280,281,282,288,290,292,293,294,297,301,304,305,306,309,312,313,315,316,317,318,319,320,321,322,324,325,327,331,332,333,335,336,339,341,343,355,359,360,363,364,365,366,367,368,369,371,373,375,376,377,384,387,388,389,399,400,401,402,405,406,407,408,410,413,414,416,],[26,26,-63,26,-29,-34,-39,26,-64,-65,-72,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-63,26,-7,26,26,26,26,-67,26,-62,-6,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-30,26,26,26,26,26,26,26,-32,26,26,26,26,26,26,-31,-66,26,26,26,26,26,26,26,26,-10,26,26,26,26,-33,26,26,26,-17,26,26,26,26,26,-84,26,26,-104,-36,-41,-38,26,26,-26,-27,-28,26,26,-35,-40,-37,26,26,-83,-90,26,26,26,26,26,26,26,26,26,26,26,-16,-18,-19,-20,-21,26,-8,-103,26,-44,-9,-91,26,26,26,26,26,-100,26,-11,-12,-15,-99,-105,-47,26,-92,-95,-96,-97,-102,-106,-107,26,-98,-93,-101,-94,]),'}':([3,4,5,20,21,22,26,27,67,80,81,89,125,141,142,143,180,191,195,196,197,198,218,219,237,241,242,243,244,245,246,247,254,258,259,260,272,280,281,282,288,289,290,291,292,293,294,295,296,297,298,300,301,302,304,305,306,311,312,313,314,315,332,333,334,335,336,337,339,340,343,344,355,359,360,363,364,371,375,376,377,384,387,388,399,400,401,402,405,406,407,410,413,414,416,],[-3,-2,-5,-29,-34,-39,-72,-4,-7,-2,-67,-6,-30,195,-2,-71,-32,-31,-66,-2,-70,-2,-10,259,-33,-68,-69,-17,-2,-2,-2,-2,-2,313,-84,-86,-104,-36,-41,-38,-14,333,-2,-25,-26,-27,-28,335,336,-2,-43,339,-2,-46,-35,-40,-37,343,-2,-83,-85,-90,-16,-18,-24,-19,-20,-42,-21,-45,-8,363,-103,-13,-44,-9,-91,-100,-11,-12,-15,-99,-105,-47,-92,-95,-96,-97,-102,-106,-107,-98,-93,-101,-94,]),'STRING':([6,7,28,49,50,51,52,54,73,75,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,116,119,120,138,189,190,206,208,209,219,224,259,260,271,272,279,309,313,315,316,327,355,364,371,372,384,387,389,395,399,400,401,402,405,406,407,408,410,413,414,416,],[28,29,44,44,44,44,44,44,44,136,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,136,235,44,252,44,44,278,-84,44,44,-104,329,44,-83,-90,44,44,-103,-91,-100,385,-99,-105,44,404,-92,-95,-96,-97,-102,-106,-107,44,-98,-93,-101,-94,]),'(':([8,9,11,13,14,15,16,17,18,19,26,28,33,42,49,50,51,52,53,54,57,62,63,73,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,116,119,120,138,167,171,206,208,209,219,259,260,262,263,264,265,266,267,268,269,270,271,272,273,309,313,315,316,327,355,364,371,384,387,389,399,400,401,402,405,406,407,408,410,413,414,416,],[30,31,32,35,36,37,38,39,40,41,-72,54,74,87,54,54,54,54,112,54,116,119,120,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,206,209,54,54,54,54,-84,54,317,318,319,320,321,322,323,324,325,54,-104,327,54,-83,-90,54,54,-103,-91,-100,-99,-105,54,-92,-95,-96,-97,-102,-106,-107,54,-98,-93,-101,-94,]),'DOUBLE_COLON':([10,24,26,55,57,88,],[-63,43,-72,115,-63,-62,]),'STAR':([10,12,24,26,44,46,48,56,57,58,59,61,64,65,66,88,108,109,110,111,113,114,118,126,127,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,170,173,174,175,192,207,210,211,212,216,231,239,251,252,261,307,308,310,326,342,345,356,362,398,412,],[-63,34,-64,-72,-144,91,-121,-110,-149,-112,-113,-116,-145,-146,-147,-62,-140,-137,91,91,91,-111,-115,91,183,-122,-123,-124,91,91,91,91,91,91,91,91,91,91,91,91,-117,-141,-148,91,91,91,-119,-114,-142,-143,34,183,287,91,-144,91,-118,-108,-120,91,91,91,91,-109,91,91,]),',':([10,24,26,33,44,46,48,56,57,58,59,61,64,65,66,68,70,71,77,78,79,81,82,83,84,85,86,88,108,109,110,111,114,118,127,130,134,136,142,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,169,170,173,179,182,185,186,193,194,195,204,205,207,210,211,212,221,225,226,234,235,236,252,256,274,275,276,277,278,283,284,299,303,307,308,310,329,346,347,348,349,350,353,354,361,362,379,383,385,398,],[-63,-64,-72,75,-144,90,-121,-110,-149,-112,-113,-116,-145,-146,-147,75,75,124,75,139,140,-67,75,75,75,75,75,-62,-140,-137,-138,-139,-111,-115,181,187,189,-82,198,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-117,208,-141,-148,220,-51,75,75,238,239,-66,75,75,-119,-114,-142,-143,181,-52,-53,-80,-79,-81,309,75,-149,75,-56,-57,-58,-54,75,75,341,-118,-108,-120,-55,365,366,367,368,369,372,373,75,-109,389,75,395,408,]),')':([10,24,26,44,46,47,48,56,57,58,59,61,64,65,66,68,70,74,76,81,82,83,84,85,86,87,88,90,108,109,110,111,113,114,116,118,122,123,127,128,129,130,131,133,134,136,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,170,172,173,174,175,181,182,187,194,195,206,207,209,210,211,212,221,222,223,225,226,229,230,233,234,235,236,250,251,252,253,274,275,276,277,278,283,284,285,286,287,307,308,310,323,328,329,330,342,351,356,362,379,380,381,382,383,386,394,398,404,412,],[-63,-64,-72,-144,-88,-89,-121,-110,-149,-112,-113,-116,-145,-146,-147,121,-2,-2,-76,-67,-2,-2,-2,-2,-2,-2,-62,-2,-140,-137,-138,-139,170,-111,-2,-115,177,178,-60,185,186,-49,-50,-75,-78,-82,199,200,201,202,203,204,205,-87,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-117,-141,210,-148,211,212,-2,-51,-2,240,-66,-2,-119,-2,-114,-142,-143,-60,-59,-61,-52,-53,-48,-50,-77,-80,-79,-81,307,308,-144,310,-149,-2,-56,-57,-58,-54,-2,331,-73,-74,-118,-108,-120,352,357,-55,358,362,370,374,-109,390,391,392,393,-2,396,403,409,411,415,]),'DOT':([10,24,26,44,48,56,57,58,59,61,64,65,66,88,114,118,167,170,173,207,210,211,212,252,307,308,310,362,],[-63,-64,-72,-144,106,-110,-149,-112,-113,-116,-145,-146,-147,-62,-111,-115,-117,-141,-148,-119,-114,-142,-143,-144,-118,-108,-120,-109,]),'[':([10,24,26,44,48,56,57,58,59,61,64,65,66,88,114,118,167,170,173,207,210,211,212,252,307,308,310,362,],[-63,-64,-72,-144,107,-110,-149,-112,-113,-116,-145,-146,-147,-62,-111,-115,-117,-141,-148,-119,-114,-142,-143,-144,-118,-108,-120,-109,]),'SLASH':([10,24,26,44,46,48,56,57,58,59,61,64,65,66,88,108,109,110,111,113,114,118,126,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,170,173,174,175,192,207,210,211,212,251,252,261,307,308,310,326,342,345,356,362,398,412,],[-63,-64,-72,-144,92,-121,-110,-149,-112,-113,-116,-145,-146,-147,-62,-140,-137,92,92,92,-111,-115,92,-122,-123,-124,92,92,92,92,92,92,92,92,92,92,92,92,-117,-141,-148,92,92,92,-119,-114,-142,-143,92,-144,92,-118,-108,-120,92,92,92,92,-109,92,92,]),'MOD':([10,24,26,44,46,48,56,57,58,59,61,64,65,66,88,108,109,110,111,113,114,118,126,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,170,173,174,175,192,207,210,211,212,251,252,261,307,308,310,326,342,345,356,362,398,412,],[-63,-64,-72,-144,93,-121,-110,-149,-112,-113,-116,-145,-146,-147,-62,-140,-137,93,93,93,-111,-115,93,-122,-123,-124,93,93,93,93,93,93,93,93,93,93,93,93,-117,-141,-148,93,93,93,-119,-114,-142,-143,93,-144,93,-118,-108,-120,93,93,93,93,-109,93,93,]),'PLUS':([10,24,26,44,46,48,56,57,58,59,61,64,65,66,88,108,109,110,111,113,114,118,126,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,170,173,174,175,192,207,210,211,212,251,252,261,307,308,310,326,342,345,356,362,398,412,],[-63,-64,-72,-144,94,-121,-110,-149,-112,-113,-116,-145,-146,-147,-62,-140,-137,94,94,94,-111,-115,94,-122,-123,-124,-125,-126,94,94,94,94,94,94,94,94,94,94,-117,-141,-148,94,94,94,-119,-114,-142,-143,94,-144,94,-118,-108,-120,94,94,94,94,-109,94,94,]),'DASH':([10,24,26,28,44,46,48,49,50,51,52,54,56,57,58,59,61,64,65,66,73,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,110,111,113,114,116,118,119,120,126,138,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,170,173,174,175,192,206,207,208,209,210,211,212,219,251,252,259,260,261,271,272,307,308,309,310,313,315,316,326,327,342,345,355,356,362,364,371,384,387,389,398,399,400,401,402,405,406,407,408,410,412,413,414,416,],[-63,-64,-72,49,-144,95,-121,49,49,49,49,49,-110,-149,-112,-113,-116,-145,-146,-147,49,-62,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-140,-137,95,95,95,-111,49,-115,49,49,95,49,-122,-123,-124,-125,-126,95,95,95,95,95,95,95,95,95,95,-117,-141,-148,95,95,95,49,-119,49,49,-114,-142,-143,49,95,-144,-84,49,95,49,-104,-118,-108,49,-120,-83,-90,49,95,49,95,95,-103,95,-109,-91,-100,-99,-105,49,95,-92,-95,-96,-97,-102,-106,-107,49,-98,95,-93,-101,-94,]),'LT':([10,24,26,44,46,48,56,57,58,59,61,64,65,66,88,108,109,110,111,113,114,118,126,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,170,173,174,175,192,207,210,211,212,251,252,261,307,308,310,326,342,345,356,362,398,412,],[-63,-64,-72,-144,96,-121,-110,-149,-112,-113,-116,-145,-146,-147,-62,-140,-137,96,96,96,-111,-115,96,-122,-123,-124,-125,-126,-127,-128,-129,-130,96,96,96,96,-135,-136,-117,-141,-148,96,96,96,-119,-114,-142,-143,96,-144,96,-118,-108,-120,96,96,96,96,-109,96,96,]),'GT':([10,24,26,44,46,48,56,57,58,59,61,64,65,66,88,108,109,110,111,113,114,118,126,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,170,173,174,175,192,207,210,211,212,251,252,261,307,308,310,326,342,345,356,362,398,412,],[-63,-64,-72,-144,97,-121,-110,-149,-112,-113,-116,-145,-146,-147,-62,-140,-137,97,97,97,-111,-115,97,-122,-123,-124,-125,-126,-127,-128,-129,-130,97,97,97,97,-135,-136,-117,-141,-148,97,97,97,-119,-114,-142,-143,97,-144,97,-118,-108,-120,97,97,97,97,-109,97,97,]),'LE':([10,24,26,44,46,48,56,57,58,59,61,64,65,66,88,108,109,110,111,113,114,118,126,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,170,173,174,175,192,207,210,211,212,251,252,261,307,308,310,326,342,345,356,362,398,412,],[-63,-64,-72,-144,98,-121,-110,-149,-112,-113,-116,-145,-146,-147,-62,-140,-137,98,98,98,-111,-115,98,-122,-123,-124,-125,-126,-127,-128,-129,-130,98,98,98,98,-135,-136,-117,-141,-148,98,98,98,-119,-114,-142,-143,98,-144,98,-118,-108,-120,98,98,98,98,-109,98,98,]),'GE':([10,24,26,44,46,48,56,57,58,59,61,64,65,66,88,108,109,110,111,113,114,118,126,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,170,173,174,175,192,207,210,211,212,251,252,261,307,308,310,326,342,345,356,362,398,412,],[-63,-64,-72,-144,99,-121,-110,-149,-112,-113,-116,-145,-146,-147,-62,-140,-137,99,99,99,-111,-115,99,-122,-123,-124,-125,-126,-127,-128,-129,-130,99,99,99,99,-135,-136,-117,-141,-148,99,99,99,-119,-114,-142,-143,99,-144,99,-118,-108,-120,99,99,99,99,-109,99,99,]),'EQ':([10,24,26,44,46,48,56,57,58,59,61,64,65,66,88,108,109,110,111,113,114,118,126,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,170,173,174,175,192,207,210,211,212,251,252,261,307,308,310,326,342,345,356,362,398,412,],[-63,-64,-72,-144,100,-121,-110,-149,-112,-113,-116,-145,-146,-147,-62,-140,-137,100,100,100,-111,-115,100,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,100,100,-135,-136,-117,-141,-148,100,100,100,-119,-114,-142,-143,100,-144,100,-118,-108,-120,100,100,100,100,-109,100,100,]),'NE':([10,24,26,44,46,48,56,57,58,59,61,64,65,66,88,108,109,110,111,113,114,118,126,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,170,173,174,175,192,207,210,211,212,251,252,261,307,308,310,326,342,345,356,362,398,412,],[-63,-64,-72,-144,101,-121,-110,-149,-112,-113,-116,-145,-146,-147,-62,-140,-137,101,101,101,-111,-115,101,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,101,101,-135,-136,-117,-141,-148,101,101,101,-119,-114,-142,-143,101,-144,101,-118,-108,-120,101,101,101,101,-109,101,101,]),'AND':([10,24,26,44,46,48,56,57,58,59,61,64,65,66,88,108,109,110,111,113,114,118,126,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,170,173,174,175,192,207,210,211,212,251,252,261,307,308,310,326,342,345,356,362,398,412,],[-63,-64,-72,-144,102,-121,-110,-149,-112,-113,-116,-145,-146,-147,-62,-140,-137,102,102,102,-111,-115,102,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,102,-135,-136,-117,-141,-148,102,102,102,-119,-114,-142,-143,102,-144,102,-118,-108,-120,102,102,102,102,-109,102,102,]),'OR':([10,24,26,44,46,48,56,57,58,59,61,64,65,66,88,108,109,110,111,113,114,118,126,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,170,173,174,175,192,207,210,211,212,251,252,261,307,308,310,326,342,345,356,362,398,412,],[-63,-64,-72,-144,103,-121,-110,-149,-112,-113,-116,-145,-146,-147,-62,-140,-137,103,103,103,-111,-115,103,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-117,-141,-148,103,103,103,-119,-114,-142,-143,103,-144,103,-118,-108,-120,103,103,103,103,-109,103,103,]),'RIGHTSHIFT':([10,24,26,44,46,48,56,57,58,59,61,64,65,66,88,108,109,110,111,113,114,118,126,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,170,173,174,175,192,207,210,211,212,251,252,261,307,308,310,326,342,345,356,362,398,412,],[-63,-64,-72,-144,104,-121,-110,-149,-112,-113,-116,-145,-146,-147,-62,-140,-137,104,104,104,-111,-115,104,-122,-123,-124,-125,-126,104,104,104,104,104,104,104,104,-135,-136,-117,-141,-148,104,104,104,-119,-114,-142,-143,104,-144,104,-118,-108,-120,104,104,104,104,-109,104,104,]),'LEFTSHIFT':([10,24,26,44,46,48,56,57,58,59,61,64,65,66,88,108,109,110,111,113,114,118,126,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,170,173,174,175,192,207,210,211,212,251,252,261,307,308,310,326,342,345,356,362,398,412,],[-63,-64,-72,-144,105,-121,-110,-149,-112,-113,-116,-145,-146,-147,-62,-140,-137,105,105,105,-111,-115,105,-122,-123,-124,-125,-126,105,105,105,105,105,105,105,105,-135,-136,-117,-141,-148,105,105,105,-119,-114,-142,-143,105,-144,105,-118,-108,-120,105,105,105,105,-109,105,105,]),'SEMI':([10,24,26,28,29,33,44,45,46,47,48,56,57,58,59,61,64,65,66,72,76,77,88,90,108,109,110,111,114,118,126,133,134,136,137,142,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,170,173,185,186,192,199,204,205,207,210,211,212,227,228,233,234,235,236,248,249,256,261,299,307,308,310,326,338,345,352,358,361,362,370,378,392,393,396,411,],[-63,-64,-72,-2,67,-2,-144,89,-88,-89,-121,-110,-149,-112,-113,-116,-145,-146,-147,125,-76,-2,-62,-2,-140,-137,-138,-139,-111,-115,180,-75,-78,-82,191,196,-87,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-117,-141,-148,-2,-2,237,243,-2,-2,-119,-114,-142,-143,280,282,-77,-80,-79,-81,304,306,-2,315,-2,-118,-108,-120,355,360,364,371,376,-2,-109,384,388,401,402,405,414,]),']':([10,24,26,44,46,47,48,56,57,58,59,61,64,65,66,88,90,107,108,109,110,111,114,118,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,170,173,207,210,211,212,307,308,310,362,],[-63,-64,-72,-144,-88,-89,-121,-110,-149,-112,-113,-116,-145,-146,-147,-62,-2,-2,-140,-137,-138,-139,-111,-115,-87,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-117,207,-141,-148,-119,-114,-142,-143,-118,-108,-120,-109,]),'ASSIGN':([10,24,26,33,44,48,56,57,58,59,61,64,65,66,77,88,108,109,110,111,114,118,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,170,173,182,207,210,211,212,225,256,261,307,308,310,362,],[-63,-64,-72,73,-144,-121,-110,-149,-112,-113,-116,-145,-146,-147,138,-62,-140,-137,-138,-139,-111,-115,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-117,-141,-148,224,-119,-114,-142,-143,279,73,316,-118,-108,-120,-109,]),'AMP':([10,24,26,88,127,188,231,],[-63,-64,-72,-62,184,232,184,]),':':([26,57,69,121,177,],[-72,117,117,176,217,]),'=':([26,135,],[-72,190,]),'{':([26,36,76,81,125,133,134,136,140,176,178,180,185,191,195,200,201,202,203,204,213,214,215,217,227,233,234,235,236,237,240,248,255,257,288,331,357,359,374,390,391,397,403,409,415,],[-72,80,-76,-67,-30,-75,-78,-82,80,-2,219,-32,-2,-31,-66,244,245,246,247,-2,254,-2,-23,-2,219,-77,-80,-79,-81,-33,80,219,-22,312,80,80,219,80,219,219,219,219,219,219,219,]),'NOT':([28,49,50,51,52,54,73,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,116,119,120,138,206,208,209,219,259,260,271,272,309,313,315,316,327,355,364,371,384,387,389,399,400,401,402,405,406,407,408,410,413,414,416,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-84,50,50,-104,50,-83,-90,50,50,-103,-91,-100,-99,-105,50,-92,-95,-96,-97,-102,-106,-107,50,-98,-93,-101,-94,]),'INCR':([28,49,50,51,52,54,73,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,116,119,120,138,206,208,209,219,259,260,271,272,309,313,315,316,327,355,364,371,384,387,389,399,400,401,402,405,406,407,408,410,413,414,416,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-84,51,51,-104,51,-83,-90,51,51,-103,-91,-100,-99,-105,51,-92,-95,-96,-97,-102,-106,-107,51,-98,-93,-101,-94,]),'DECR':([28,49,50,51,52,54,73,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,116,119,120,138,206,208,209,219,259,260,271,272,309,313,315,316,327,355,364,371,384,387,389,399,400,401,402,405,406,407,408,410,413,414,416,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-84,52,52,-104,52,-83,-90,52,52,-103,-91,-100,-99,-105,52,-92,-95,-96,-97,-102,-106,-107,52,-98,-93,-101,-94,]),'STATIC_CAST':([28,49,50,51,52,54,73,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,116,119,120,138,206,208,209,219,259,260,271,272,309,313,315,316,327,355,364,371,384,387,389,399,400,401,402,405,406,407,408,410,413,414,416,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-84,53,53,-104,53,-83,-90,53,53,-103,-91,-100,-99,-105,53,-92,-95,-96,-97,-102,-106,-107,53,-98,-93,-101,-94,]),'NEW':([28,49,50,51,52,54,73,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,116,119,120,138,206,208,209,219,259,260,271,272,309,313,315,316,327,355,364,371,384,387,389,399,400,401,402,405,406,407,408,410,413,414,416,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-84,60,60,-104,60,-83,-90,60,60,-103,-91,-100,-99,-105,60,-92,-95,-96,-97,-102,-106,-107,60,-98,-93,-101,-94,]),'OOD':([28,49,50,51,52,54,73,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,116,119,120,138,206,208,209,219,259,260,271,272,309,313,315,316,327,355,364,371,384,387,389,399,400,401,402,405,406,407,408,410,413,414,416,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-84,61,61,-104,61,-83,-90,61,61,-103,-91,-100,-99,-105,61,-92,-95,-96,-97,-102,-106,-107,61,-98,-93,-101,-94,]),'IS_VALID':([28,49,50,51,52,54,73,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,116,119,120,138,206,208,209,219,259,260,271,272,309,313,315,316,327,355,364,371,384,387,389,399,400,401,402,405,406,407,408,410,413,414,416,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-84,62,62,-104,62,-83,-90,62,62,-103,-91,-100,-99,-105,62,-92,-95,-96,-97,-102,-106,-107,62,-98,-93,-101,-94,]),'IS_INVALID':([28,49,50,51,52,54,73,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,116,119,120,138,206,208,209,219,259,260,271,272,309,313,315,316,327,355,364,371,384,387,389,399,400,401,402,405,406,407,408,410,413,414,416,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-84,63,63,-104,63,-83,-90,63,63,-103,-91,-100,-99,-105,63,-92,-95,-96,-97,-102,-106,-107,63,-98,-93,-101,-94,]),'NUMBER':([28,49,50,51,52,54,73,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,116,119,120,138,190,206,208,209,219,224,259,260,271,272,309,313,315,316,327,355,364,371,384,387,389,399,400,401,402,405,406,407,408,410,413,414,416,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,236,64,64,64,64,276,-84,64,64,-104,64,-83,-90,64,64,-103,-91,-100,-99,-105,64,-92,-95,-96,-97,-102,-106,-107,64,-98,-93,-101,-94,]),'FLOATNUMBER':([28,49,50,51,52,54,73,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,116,119,120,138,206,208,209,219,259,260,271,272,309,313,315,316,327,355,364,371,384,387,389,399,400,401,402,405,406,407,408,410,413,414,416,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-84,65,65,-104,65,-83,-90,65,65,-103,-91,-100,-99,-105,65,-92,-95,-96,-97,-102,-106,-107,65,-98,-93,-101,-94,]),'LIT_BOOL':([28,49,50,51,52,54,73,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,116,119,120,138,206,208,209,219,224,259,260,271,272,309,313,315,316,327,355,364,371,384,387,389,399,400,401,402,405,406,407,408,410,413,414,416,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,277,-84,66,66,-104,66,-83,-90,66,66,-103,-91,-100,-99,-105,66,-92,-95,-96,-97,-102,-106,-107,66,-98,-93,-101,-94,]),'CONST':([74,87,187,],[132,132,132,]),'ENQUEUE':([219,259,260,272,313,315,355,364,371,384,387,399,400,401,402,405,406,407,410,413,414,416,],[262,-84,262,-104,-83,-90,-103,-91,-100,-99,-105,-92,-95,-96,-97,-102,-106,-107,-98,-93,-101,-94,]),'DEFER_ENQUEUEING':([219,259,260,272,313,315,355,364,371,384,387,399,400,401,402,405,406,407,410,413,414,416,],[263,-84,263,-104,-83,-90,-103,-91,-100,-99,-105,-92,-95,-96,-97,-102,-106,-107,-98,-93,-101,-94,]),'STALL_AND_WAIT':([219,259,260,272,313,315,355,364,371,384,387,399,400,401,402,405,406,407,410,413,414,416,],[264,-84,264,-104,-83,-90,-103,-91,-100,-99,-105,-92,-95,-96,-97,-102,-106,-107,-98,-93,-101,-94,]),'WAKEUP_PORT':([219,259,260,272,313,315,355,364,371,384,387,399,400,401,402,405,406,407,410,413,414,416,],[265,-84,265,-104,-83,-90,-103,-91,-100,-99,-105,-92,-95,-96,-97,-102,-106,-107,-98,-93,-101,-94,]),'PEEK':([219,259,260,272,313,315,355,364,371,384,387,399,400,401,402,405,406,407,410,413,414,416,],[266,-84,266,-104,-83,-90,-103,-91,-100,-99,-105,-92,-95,-96,-97,-102,-106,-107,-98,-93,-101,-94,]),'CHECK_ALLOCATE':([219,259,260,272,313,315,355,364,371,384,387,399,400,401,402,405,406,407,410,413,414,416,],[267,-84,267,-104,-83,-90,-103,-91,-100,-99,-105,-92,-95,-96,-97,-102,-106,-107,-98,-93,-101,-94,]),'CHECK_NEXT_CYCLE':([219,259,260,272,313,315,355,364,371,384,387,399,400,401,402,405,406,407,410,413,414,416,],[268,-84,268,-104,-83,-90,-103,-91,-100,-99,-105,-92,-95,-96,-97,-102,-106,-107,-98,-93,-101,-94,]),'CHECK_STOP_SLOTS':([219,259,260,272,313,315,355,364,371,384,387,399,400,401,402,405,406,407,410,413,414,416,],[269,-84,269,-104,-83,-90,-103,-91,-100,-99,-105,-92,-95,-96,-97,-102,-106,-107,-98,-93,-101,-94,]),'CHECK_PROBE':([219,259,260,272,313,315,355,364,371,384,387,399,400,401,402,405,406,407,410,413,414,416,],[270,-84,270,-104,-83,-90,-103,-91,-100,-99,-105,-92,-95,-96,-97,-102,-106,-107,-98,-93,-101,-94,]),'RETURN':([219,259,260,272,313,315,355,364,371,384,387,399,400,401,402,405,406,407,410,413,414,416,],[271,-84,271,-104,-83,-90,-103,-91,-100,-99,-105,-92,-95,-96,-97,-102,-106,-107,-98,-93,-101,-94,]),'IF':([219,259,260,272,313,315,355,364,371,384,387,397,399,400,401,402,405,406,407,410,413,414,416,],[273,-84,273,-104,-83,-90,-103,-91,-100,-99,-105,273,-92,-95,-96,-97,-102,-106,-107,-98,-93,-101,-94,]),'ELSE':([259,313,387,],[-84,-83,397,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'file':([0,],[1,]),'decls':([0,254,312,],[2,311,344,]),'declsx':([0,4,254,312,],[3,27,3,3,]),'decl':([0,4,254,312,],[4,4,4,4,]),'empty':([0,4,28,33,68,70,74,77,80,82,83,84,85,86,87,90,107,116,142,176,181,185,186,187,196,198,204,205,206,209,214,217,244,245,246,247,254,256,275,284,290,297,299,301,312,361,383,],[5,5,47,76,76,76,131,76,143,76,76,76,76,76,131,47,47,47,143,215,223,76,76,230,143,143,76,76,47,47,215,215,291,291,298,302,5,76,76,76,291,298,76,302,5,76,76,]),'ident':([0,4,12,23,28,30,31,32,34,35,36,37,38,39,40,41,43,49,50,51,52,54,55,60,73,74,75,80,87,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,112,115,116,117,119,120,124,127,132,138,139,140,142,176,181,183,184,187,189,190,196,198,206,208,209,214,216,217,219,220,231,232,238,239,240,244,245,246,247,254,260,271,288,290,297,301,309,312,316,317,318,319,320,321,322,324,325,327,331,341,359,365,366,367,368,369,373,389,408,],[10,10,33,42,57,69,70,71,77,78,81,10,10,10,10,10,88,57,57,57,57,57,114,10,57,10,135,142,10,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,167,57,10,171,57,173,57,57,10,182,10,57,10,81,142,10,10,225,226,10,135,234,142,142,57,57,57,10,256,10,57,274,182,283,274,286,81,10,10,299,303,10,57,57,81,10,299,303,57,10,57,274,274,274,274,274,274,274,274,57,81,69,81,10,10,274,274,10,274,57,57,]),'type':([0,4,28,37,38,39,40,41,49,50,51,52,54,60,73,74,87,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,112,116,119,120,124,132,138,139,176,181,187,206,208,209,214,217,219,244,245,254,260,271,290,309,312,316,327,365,366,369,389,408,],[12,12,55,82,83,84,85,86,55,55,55,55,55,118,55,127,127,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,169,55,55,55,179,188,55,193,216,221,231,55,55,55,216,216,55,12,12,12,55,55,12,55,12,55,55,379,380,383,55,55,]),'obj_decl':([0,4,176,214,217,244,245,254,290,312,],[20,20,214,214,214,292,292,20,292,20,]),'func_decl':([0,4,244,245,254,290,312,],[21,21,293,293,21,293,21,]),'func_def':([0,4,244,245,254,290,312,],[22,22,294,294,22,294,22,]),'void':([0,4,244,245,254,290,312,],[23,23,23,23,23,23,23,]),'typestr':([0,4,28,37,38,39,40,41,49,50,51,52,54,60,73,74,87,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,112,116,119,120,124,132,138,139,176,181,187,206,208,209,214,217,219,244,245,254,260,271,290,309,312,316,327,365,366,369,389,408,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'exprs':([28,90,107,116,206,209,],[45,151,168,172,250,253,]),'expr':([28,49,50,51,52,54,73,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,116,119,120,138,206,208,209,219,260,271,309,316,327,389,408,],[46,108,109,110,111,113,126,46,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,46,46,174,175,192,46,251,46,261,261,326,342,345,356,398,412,]),'aexpr':([28,49,50,51,52,54,73,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,116,119,120,138,206,208,209,219,260,271,309,316,327,389,408,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'var':([28,49,50,51,52,54,73,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,116,119,120,138,206,208,209,219,220,238,260,271,309,316,317,318,319,320,321,322,324,325,327,367,368,373,389,408,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,275,284,56,56,56,56,346,347,348,349,350,351,353,354,56,381,382,386,56,56,]),'literal':([28,49,50,51,52,54,73,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,116,119,120,138,206,208,209,219,260,271,309,316,327,389,408,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'enumeration':([28,30,49,50,51,52,54,73,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,116,119,120,138,206,208,209,219,260,271,309,316,327,341,389,408,],[59,68,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,361,59,59,]),'pairs':([33,68,70,77,82,83,84,85,86,185,186,204,205,256,275,284,299,361,383,],[72,122,123,137,144,145,146,147,148,227,228,248,249,72,328,330,338,378,394,]),'idents':([36,140,240,288,331,359,],[79,194,288,332,359,377,]),'params':([74,87,187,],[128,149,229,]),'types':([74,87,181,],[129,150,222,]),'param':([74,87,187,],[130,130,130,]),'pairsx':([75,189,],[133,233,]),'pair':([75,189,],[134,134,]),'identx':([80,142,196,198,],[141,197,241,242,]),'obj_decls':([176,214,217,],[213,255,257,]),'statements':([178,227,248,357,374,390,391,397,403,409,415,],[218,281,305,375,387,399,400,406,410,413,416,]),'statements_inner':([219,260,],[258,314,]),'statement':([219,260,],[260,260,]),'if_statement':([219,260,397,],[272,272,407,]),'ident_or_star':([239,],[285,]),'type_members':([244,245,290,],[289,295,334,]),'type_member':([244,245,290,],[290,290,290,]),'type_enums':([246,297,],[296,337,]),'type_enum':([246,297,],[297,297,]),'type_states':([247,301,],[300,340,]),'type_state':([247,301,],[301,301,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> file","S'",1,None,None,None),
  ('file -> decls','file',1,'p_file','parser.py',290),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',294),
  ('decls -> declsx','decls',1,'p_decls','parser.py',297),
  ('declsx -> decl declsx','declsx',2,'p_declsx__list','parser.py',301),
  ('declsx -> empty','declsx',1,'p_declsx__none','parser.py',311),
  ('decl -> PROTOCOL STRING exprs SEMI','decl',4,'p_decl__protocol','parser.py',315),
  ('decl -> INCLUDE STRING SEMI','decl',3,'p_decl__include','parser.py',336),
  ('decl -> MACHINE ( enumeration ) : obj_decls { decls }','decl',9,'p_decl__machine0','parser.py',345),
  ('decl -> MACHINE ( enumeration pairs ) : obj_decls { decls }','decl',10,'p_decl__machine1','parser.py',349),
  ('decl -> ACTION ( ident pairs ) statements','decl',6,'p_decl__action','parser.py',353),
  ('decl -> IN_PORT ( ident , type , var pairs ) statements','decl',10,'p_decl__in_port','parser.py',357),
  ('decl -> OUT_PORT ( ident , type , var pairs ) SEMI','decl',10,'p_decl__out_port','parser.py',361),
  ('decl -> TRANS ( idents , idents , ident_or_star ) idents','decl',9,'p_decl__trans0','parser.py',365),
  ('decl -> TRANS ( idents , idents ) idents','decl',7,'p_decl__trans1','parser.py',369),
  ('decl -> TRANS ( idents , idents , ident_or_star ) idents idents','decl',10,'p_decl__trans2','parser.py',373),
  ('decl -> TRANS ( idents , idents ) idents idents','decl',8,'p_decl__trans3','parser.py',377),
  ('decl -> EXTERN_TYPE ( type pairs ) SEMI','decl',6,'p_decl__extern0','parser.py',381),
  ('decl -> GLOBAL ( type pairs ) { type_members }','decl',8,'p_decl__global','parser.py',386),
  ('decl -> STRUCT ( type pairs ) { type_members }','decl',8,'p_decl__struct','parser.py',391),
  ('decl -> ENUM ( type pairs ) { type_enums }','decl',8,'p_decl__enum','parser.py',395),
  ('decl -> STATE_DECL ( type pairs ) { type_states }','decl',8,'p_decl__state_decl','parser.py',400),
  ('obj_decls -> obj_decl obj_decls','obj_decls',2,'p_obj_decls__list','parser.py',407),
  ('obj_decls -> empty','obj_decls',1,'p_obj_decls__empty','parser.py',411),
  ('type_members -> type_member type_members','type_members',2,'p_type_members__list','parser.py',415),
  ('type_members -> empty','type_members',1,'p_type_members__empty','parser.py',419),
  ('type_member -> obj_decl','type_member',1,'p_type_member__0','parser.py',423),
  ('type_member -> func_decl','type_member',1,'p_type_member__0','parser.py',424),
  ('type_member -> func_def','type_member',1,'p_type_member__0','parser.py',425),
  ('decl -> obj_decl','decl',1,'p_decl__obj_decl','parser.py',430),
  ('obj_decl -> type ident pairs SEMI','obj_decl',4,'p_obj_decl__0','parser.py',434),
  ('obj_decl -> type STAR ident pairs SEMI','obj_decl',5,'p_obj_decl__1','parser.py',438),
  ('obj_decl -> type ident ASSIGN expr SEMI','obj_decl',5,'p_obj_decl__2','parser.py',442),
  ('obj_decl -> type STAR ident ASSIGN expr SEMI','obj_decl',6,'p_obj_decl__3','parser.py',448),
  ('decl -> func_decl','decl',1,'p_decl__func_decl','parser.py',455),
  ('func_decl -> void ident ( params ) pairs SEMI','func_decl',7,'p_func_decl__0','parser.py',459),
  ('func_decl -> type ident ( params ) pairs SEMI','func_decl',7,'p_func_decl__0','parser.py',460),
  ('func_decl -> void ident ( types ) pairs SEMI','func_decl',7,'p_func_decl__1','parser.py',464),
  ('func_decl -> type ident ( types ) pairs SEMI','func_decl',7,'p_func_decl__1','parser.py',465),
  ('decl -> func_def','decl',1,'p_decl__func_def','parser.py',469),
  ('func_def -> void ident ( params ) pairs statements','func_def',7,'p_func_def__0','parser.py',473),
  ('func_def -> type ident ( params ) pairs statements','func_def',7,'p_func_def__0','parser.py',474),
  ('type_enums -> type_enum type_enums','type_enums',2,'p_type_enums__list','parser.py',479),
  ('type_enums -> empty','type_enums',1,'p_type_enums__empty','parser.py',483),
  ('type_enum -> ident pairs SEMI','type_enum',3,'p_type_enum','parser.py',487),
  ('type_states -> type_state type_states','type_states',2,'p_type_states__list','parser.py',492),
  ('type_states -> empty','type_states',1,'p_type_states__empty','parser.py',496),
  ('type_state -> ident , enumeration pairs SEMI','type_state',5,'p_type_state','parser.py',500),
  ('params -> param , params','params',3,'p_params__many','parser.py',505),
  ('params -> param','params',1,'p_params__one','parser.py',509),
  ('params -> empty','params',1,'p_params__none','parser.py',513),
  ('param -> type ident','param',2,'p_param','parser.py',517),
  ('param -> type STAR ident','param',3,'p_param__pointer','parser.py',521),
  ('param -> type AMP ident','param',3,'p_param__ref','parser.py',525),
  ('param -> CONST type AMP ident','param',4,'p_param__const_ref','parser.py',529),
  ('param -> type STAR ident ASSIGN STRING','param',5,'p_param__pointer_default','parser.py',533),
  ('param -> type ident ASSIGN NUMBER','param',4,'p_param__default_number','parser.py',537),
  ('param -> type ident ASSIGN LIT_BOOL','param',4,'p_param__default_bool','parser.py',541),
  ('param -> type ident ASSIGN STRING','param',4,'p_param__default_string','parser.py',545),
  ('types -> type , types','types',3,'p_types__multiple','parser.py',550),
  ('types -> type','types',1,'p_types__one','parser.py',554),
  ('types -> empty','types',1,'p_types__empty','parser.py',558),
  ('typestr -> typestr DOUBLE_COLON ident','typestr',3,'p_typestr__multi','parser.py',562),
  ('typestr -> ident','typestr',1,'p_typestr__single','parser.py',566),
  ('type -> typestr','type',1,'p_type__one','parser.py',570),
  ('void -> VOID','void',1,'p_void','parser.py',574),
  ('idents -> { identx }','idents',3,'p_idents__braced','parser.py',579),
  ('idents -> ident','idents',1,'p_idents__bare','parser.py',583),
  ('identx -> ident SEMI identx','identx',3,'p_identx__multiple_1','parser.py',587),
  ('identx -> ident , identx','identx',3,'p_identx__multiple_1','parser.py',588),
  ('identx -> ident identx','identx',2,'p_identx__multiple_2','parser.py',592),
  ('identx -> empty','identx',1,'p_identx__single','parser.py',596),
  ('ident -> IDENT','ident',1,'p_ident','parser.py',600),
  ('ident_or_star -> ident','ident_or_star',1,'p_ident_or_star','parser.py',604),
  ('ident_or_star -> STAR','ident_or_star',1,'p_ident_or_star','parser.py',605),
  ('pairs -> , pairsx','pairs',2,'p_pairs__list','parser.py',610),
  ('pairs -> empty','pairs',1,'p_pairs__empty','parser.py',614),
  ('pairsx -> pair , pairsx','pairsx',3,'p_pairsx__many','parser.py',618),
  ('pairsx -> pair','pairsx',1,'p_pairsx__one','parser.py',623),
  ('pair -> ident = STRING','pair',3,'p_pair__assign','parser.py',628),
  ('pair -> ident = ident','pair',3,'p_pair__assign','parser.py',629),
  ('pair -> ident = NUMBER','pair',3,'p_pair__assign','parser.py',630),
  ('pair -> STRING','pair',1,'p_pair__literal','parser.py',634),
  ('statements -> { statements_inner }','statements',3,'p_statements__inner','parser.py',639),
  ('statements -> { }','statements',2,'p_statements__none','parser.py',643),
  ('statements_inner -> statement statements_inner','statements_inner',2,'p_statements_inner__many','parser.py',647),
  ('statements_inner -> statement','statements_inner',1,'p_statements_inner__one','parser.py',651),
  ('exprs -> expr , exprs','exprs',3,'p_exprs__multiple','parser.py',655),
  ('exprs -> expr','exprs',1,'p_exprs__one','parser.py',659),
  ('exprs -> empty','exprs',1,'p_exprs__empty','parser.py',663),
  ('statement -> expr SEMI','statement',2,'p_statement__expression','parser.py',667),
  ('statement -> expr ASSIGN expr SEMI','statement',4,'p_statement__assign','parser.py',671),
  ('statement -> ENQUEUE ( var , type ) statements','statement',7,'p_statement__enqueue','parser.py',675),
  ('statement -> ENQUEUE ( var , type , expr ) statements','statement',9,'p_statement__enqueue_latency','parser.py',679),
  ('statement -> ENQUEUE ( var , type , expr , expr ) statements','statement',11,'p_statement__enqueue_latency_bypass_strict_fifo','parser.py',683),
  ('statement -> DEFER_ENQUEUEING ( var , type ) statements','statement',7,'p_statement__defer_enqueueing','parser.py',687),
  ('statement -> STALL_AND_WAIT ( var , var ) SEMI','statement',7,'p_statement__stall_and_wait','parser.py',691),
  ('statement -> WAKEUP_PORT ( var , var ) SEMI','statement',7,'p_statement__wakeup_port','parser.py',695),
  ('statement -> PEEK ( var , type pairs ) statements','statement',8,'p_statement__peek','parser.py',699),
  ('statement -> CHECK_ALLOCATE ( var ) SEMI','statement',5,'p_statement__check_allocate','parser.py',703),
  ('statement -> CHECK_NEXT_CYCLE ( ) SEMI','statement',4,'p_statement__check_next_cycle','parser.py',707),
  ('statement -> CHECK_STOP_SLOTS ( var , STRING , STRING ) SEMI','statement',9,'p_statement__check_stop','parser.py',711),
  ('statement -> CHECK_PROBE ( var , var ) SEMI','statement',7,'p_statement__check_probe','parser.py',715),
  ('statement -> RETURN expr SEMI','statement',3,'p_statement__return','parser.py',719),
  ('statement -> if_statement','statement',1,'p_statement__if','parser.py',723),
  ('if_statement -> IF ( expr ) statements','if_statement',5,'p_if_statement__if','parser.py',727),
  ('if_statement -> IF ( expr ) statements ELSE statements','if_statement',7,'p_if_statement__if_else','parser.py',731),
  ('if_statement -> IF ( expr ) statements ELSE if_statement','if_statement',7,'p_statement__if_else_if','parser.py',735),
  ('aexpr -> STATIC_CAST ( type , expr )','aexpr',6,'p_expr__static_cast','parser.py',741),
  ('aexpr -> STATIC_CAST ( type , STRING , expr )','aexpr',8,'p_expr__static_cast_ptr','parser.py',745),
  ('aexpr -> var','aexpr',1,'p_expr__var','parser.py',749),
  ('aexpr -> type ident','aexpr',2,'p_expr__localvar','parser.py',753),
  ('aexpr -> literal','aexpr',1,'p_expr__literal','parser.py',757),
  ('aexpr -> enumeration','aexpr',1,'p_expr__enumeration','parser.py',761),
  ('aexpr -> ident ( exprs )','aexpr',4,'p_expr__func_call','parser.py',765),
  ('aexpr -> NEW type','aexpr',2,'p_expr__new','parser.py',769),
  ('aexpr -> OOD','aexpr',1,'p_expr__null','parser.py',773),
  ('aexpr -> aexpr DOT ident','aexpr',3,'p_expr__member','parser.py',777),
  ('aexpr -> aexpr DOT ident ( exprs )','aexpr',6,'p_expr__member_method_call','parser.py',781),
  ('aexpr -> aexpr [ exprs ]','aexpr',4,'p_expr__member_method_call_lookup','parser.py',787),
  ('aexpr -> type DOUBLE_COLON ident ( exprs )','aexpr',6,'p_expr__class_method_call','parser.py',793),
  ('expr -> aexpr','expr',1,'p_expr__aexpr','parser.py',799),
  ('expr -> expr STAR expr','expr',3,'p_expr__binary_op','parser.py',803),
  ('expr -> expr SLASH expr','expr',3,'p_expr__binary_op','parser.py',804),
  ('expr -> expr MOD expr','expr',3,'p_expr__binary_op','parser.py',805),
  ('expr -> expr PLUS expr','expr',3,'p_expr__binary_op','parser.py',806),
  ('expr -> expr DASH expr','expr',3,'p_expr__binary_op','parser.py',807),
  ('expr -> expr LT expr','expr',3,'p_expr__binary_op','parser.py',808),
  ('expr -> expr GT expr','expr',3,'p_expr__binary_op','parser.py',809),
  ('expr -> expr LE expr','expr',3,'p_expr__binary_op','parser.py',810),
  ('expr -> expr GE expr','expr',3,'p_expr__binary_op','parser.py',811),
  ('expr -> expr EQ expr','expr',3,'p_expr__binary_op','parser.py',812),
  ('expr -> expr NE expr','expr',3,'p_expr__binary_op','parser.py',813),
  ('expr -> expr AND expr','expr',3,'p_expr__binary_op','parser.py',814),
  ('expr -> expr OR expr','expr',3,'p_expr__binary_op','parser.py',815),
  ('expr -> expr RIGHTSHIFT expr','expr',3,'p_expr__binary_op','parser.py',816),
  ('expr -> expr LEFTSHIFT expr','expr',3,'p_expr__binary_op','parser.py',817),
  ('expr -> NOT expr','expr',2,'p_expr__unary_op','parser.py',822),
  ('expr -> INCR expr','expr',2,'p_expr__unary_op','parser.py',823),
  ('expr -> DECR expr','expr',2,'p_expr__unary_op','parser.py',824),
  ('expr -> DASH expr','expr',2,'p_expr__unary_op','parser.py',825),
  ('aexpr -> ( expr )','aexpr',3,'p_expr__parens','parser.py',829),
  ('aexpr -> IS_VALID ( expr )','aexpr',4,'p_expr__is_valid_ptr','parser.py',833),
  ('aexpr -> IS_INVALID ( expr )','aexpr',4,'p_expr__is_invalid_ptr','parser.py',837),
  ('literal -> STRING','literal',1,'p_literal__string','parser.py',841),
  ('literal -> NUMBER','literal',1,'p_literal__number','parser.py',845),
  ('literal -> FLOATNUMBER','literal',1,'p_literal__float','parser.py',849),
  ('literal -> LIT_BOOL','literal',1,'p_literal__bool','parser.py',853),
  ('enumeration -> ident : ident','enumeration',3,'p_enumeration','parser.py',857),
  ('var -> ident','var',1,'p_var','parser.py',861),
]

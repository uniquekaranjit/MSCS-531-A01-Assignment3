// -*- mode:c++ -*-

// Copyright (c) 2015 RISC-V Foundation
// Copyright (c) 2016 The University of Virginia
// Copyright (c) 2024 Google LLC
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer;
// redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution;
// neither the name of the copyright holders nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Cmjalt decode template.
def template CmJaltDeclare {{
    class %(class_name)s : public %(base_class)s
    {
      private:
        %(reg_idx_arr_decl)s;

      public:
        /// Constructor.
        %(class_name)s(ExtMachInst machInst);
        Fault execute(ExecContext *, trace::InstRecord *) const override;

        std::string
        generateDisassembly(
                Addr pc, const loader::SymbolTable *symtab) const override;

        std::unique_ptr<PCStateBase> branchTarget(
                ThreadContext *tc) const override;

        using StaticInst::branchTarget;
    };
}};

def template CmJaltConstructor {{
    %(class_name)s::%(class_name)s(ExtMachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, %(op_class)s)
    {

      %(set_reg_idx_arr)s;
      %(constructor)s;
      imm = rvSelect(machInst.jt_index << 2, machInst.jt_index << 3);
    }
}};

def template CmJaltExecute {{
    Fault
    %(class_name)s::execute(
        ExecContext *xc, trace::InstRecord *traceData) const
    {
        %(op_decl)s;
        %(op_rd)s;

        JVT jvt = xc->readMiscReg(MISCREG_JVT);
        if (jvt.mode != 0) {
          return std::make_shared<IllegalInstFault>("jvt.mode != 0", machInst);
        }
        Addr base = mbits(jvt, 63, 6);

        %(code)s;
        %(op_wb)s;
        return NoFault;
    }

    std::unique_ptr<PCStateBase>
    %(class_name)s::branchTarget(ThreadContext *tc) const
    {
        PCStateBase *pc_ptr = tc->pcState().clone();
        pc_ptr->as<PCState>().zcmtSecondFetch(true);
        pc_ptr->as<PCState>().zcmtPc(pc_ptr->instAddr());
        JVT jvt = tc->readMiscReg(MISCREG_JVT);
        Addr base = mbits(jvt, 63, 6);
        if (jvt.mode == 0) {
          pc_ptr->as<PCState>().set(rvSext((base + imm) & ~0x1));
        }
        return std::unique_ptr<PCStateBase>{pc_ptr};
    }

    std::string
    %(class_name)s::generateDisassembly(
            Addr pc, const loader::SymbolTable *symtab) const
    {
        std::stringstream ss;
        ss << mnemonic << ' ' << machInst.jt_index;
        return ss.str();
    }
}};

def format CmJalt(code, *flags) {{
    precode = '''
    ZcmtSecondFetch = true;
    ZcmtPC = PC;
    '''
    code = precode + code
    iop = InstObjParams(name, Name, 'ImmOp<int64_t>', code, flags)
    header_output = CmJaltDeclare.subst(iop)
    decoder_output = CmJaltConstructor.subst(iop)
    exec_output = CmJaltExecute.subst(iop)
    decode_block = BasicDecode.subst(iop)
}};
